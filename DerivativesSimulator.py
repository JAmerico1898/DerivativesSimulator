import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from dataclasses import dataclass
from enum import Enum
from scipy.stats import norm
import math
import random

st.markdown("<h2 style='text-align: center;'>üìä Simulador de Derivativos</h2>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center;'>Ferramenta com fins pedag√≥gicos</h3>", unsafe_allow_html=True)
#st.markdown("<h6 style='text-align: center;'>(dados Opta)</h6>", unsafe_allow_html=True)

st.markdown("---")

# Initialize session state variables if they don‚Äôt exist
if "step" not in st.session_state:
    st.session_state.step = "start"  # Initial state
if "selected_option" not in st.session_state:
    st.session_state.selected_option = None

# Function to update the selected option
def select_option(option):
    st.session_state.selected_option = option

# Create three columns for the initial choices
col1, col2, col3 = st.columns([4, 1, 4])

with col1:
    if st.button("Introdu√ß√£o", type='primary', use_container_width=True):
        st.session_state.step = "Introdu√ß√£o"
        st.session_state.selected_option = None  # Reset selection when switching

with col3:
    if st.button("Derivativos", type='primary', use_container_width=True):
        st.session_state.step = "Derivativos"
        st.session_state.selected_option = None  # Reset selection when switching

# Step 1: Introdu√ß√£o
if st.session_state.step == "Introdu√ß√£o":
    
    # Fun√ß√£o para gerar o banco de quest√µes
    def gerar_banco_questoes():
        # Lista de quest√µes n√£o-embaralhadas
        questoes_base = [
            {
                "pergunta": "Qual √© a defini√ß√£o b√°sica de um derivativo?",
                "opcoes": [
                    "Um instrumento financeiro cujo valor depende de um ativo subjacente",
                    "Um t√≠tulo emitido pelo governo para financiar d√≠vidas",
                    "Uma a√ß√£o negociada em bolsa de valores",
                    "Um empr√©stimo banc√°rio com juros fixos"
                ],
                "resposta": 0,
                "explicacao": "Derivativos s√£o instrumentos financeiros cujo valor depende (ou deriva) do valor de outros ativos subjacentes, como a√ß√µes, t√≠tulos, commodities, moedas, taxas de juros ou √≠ndices de mercado."
            },
            {
                "pergunta": "Quais s√£o os dois tipos principais de derivativos em rela√ß√£o ao local de negocia√ß√£o?",
                "opcoes": [
                    "Derivativos prim√°rios e secund√°rios",
                    "Derivativos de balc√£o (OTC) e negociados em bolsa",
                    "Derivativos financeiros e n√£o-financeiros",
                    "Derivativos de curto e longo prazo"
                ],
                "resposta": 1,
                "explicacao": "Quanto √† negocia√ß√£o, os derivativos podem ser classificados em derivativos de balc√£o (OTC - Over The Counter) e derivativos negociados em bolsa."
            },
            {
                "pergunta": "Qual √© uma das principais fun√ß√µes dos derivativos no mercado financeiro?",
                "opcoes": [
                    "Aumentar os riscos de mercado para todos os participantes",
                    "Substituir completamente os mercados de a√ß√µes e t√≠tulos",
                    "Oferecer prote√ß√£o contra varia√ß√µes adversas de pre√ßos (hedge)",
                    "Eliminar a necessidade de an√°lise de mercado"
                ],
                "resposta": 2,
                "explicacao": "Uma das principais fun√ß√µes dos derivativos √© oferecer prote√ß√£o (hedge) contra riscos de varia√ß√µes adversas nos pre√ßos dos ativos subjacentes."
            },
            {
                "pergunta": "Qual √© o prop√≥sito do hedge com derivativos?",
                "opcoes": [
                    "Aumentar a exposi√ß√£o ao risco para obter maiores retornos",
                    "Remover completamente qualquer possibilidade de lucro ou perda",
                    "Proteger-se contra movimentos adversos de pre√ßos dos ativos",
                    "Manipular pre√ßos de mercado a favor do investidor"
                ],
                "resposta": 2,
                "explicacao": "O hedge com derivativos tem como prop√≥sito proteger investidores ou empresas contra movimentos adversos nos pre√ßos dos ativos, transferindo o risco para outras partes dispostas a assumi-lo."
            },
            {
                "pergunta": "O que caracteriza um derivativo negociado em bolsa?",
                "opcoes": [
                    "Contratos personalizados para necessidades espec√≠ficas de cada cliente",
                    "Aus√™ncia de uma c√¢mara de compensa√ß√£o",
                    "Contratos padronizados com especifica√ß√µes uniformes",
                    "Maior risco de contraparte comparado aos derivativos de balc√£o"
                ],
                "resposta": 2,
                "explicacao": "Derivativos negociados em bolsa s√£o caracterizados por contratos padronizados com especifica√ß√µes uniformes quanto a quantidade, qualidade, data de entrega e local."
            },
            {
                "pergunta": "Qual √© uma das vantagens dos derivativos de balc√£o (OTC) em rela√ß√£o aos negociados em bolsa?",
                "opcoes": [
                    "Maior padroniza√ß√£o",
                    "Menor risco de contraparte",
                    "Maior liquidez",
                    "Flexibilidade para atender necessidades espec√≠ficas"
                ],
                "resposta": 3,
                "explicacao": "Uma das principais vantagens dos derivativos OTC √© a flexibilidade para personalizar os contratos de acordo com as necessidades espec√≠ficas das partes envolvidas."
            },
            {
                "pergunta": "Qual √© o papel da c√¢mara de compensa√ß√£o nos derivativos negociados em bolsa?",
                "opcoes": [
                    "Determinar o pre√ßo de negocia√ß√£o dos derivativos",
                    "Atuar como contraparte central, reduzindo o risco de inadimpl√™ncia",
                    "Fornecer financiamento para os participantes do mercado",
                    "Criar novos tipos de contratos derivativos"
                ],
                "resposta": 1,
                "explicacao": "A c√¢mara de compensa√ß√£o atua como contraparte central para todas as transa√ß√µes, garantindo que as obriga√ß√µes sejam cumpridas e reduzindo significativamente o risco de inadimpl√™ncia nos derivativos negociados em bolsa."
            },
            {
                "pergunta": "O que √© arbitragem no contexto de derivativos?",
                "opcoes": [
                    "A negocia√ß√£o de op√ß√µes de compra e venda simultaneamente",
                    "O processo de resolu√ß√£o de disputas entre partes de um contrato",
                    "A explora√ß√£o de discrep√¢ncias de pre√ßos para obter lucro sem risco",
                    "A determina√ß√£o do pre√ßo justo de um derivativo por especialistas"
                ],
                "resposta": 2,
                "explicacao": "Arbitragem √© a estrat√©gia de explorar discrep√¢ncias de pre√ßos entre mercados ou instrumentos relacionados para obter lucro sem risco (ou com risco m√≠nimo)."
            },
            {
                "pergunta": "Qual √© o principal risco associado aos derivativos de balc√£o (OTC)?",
                "opcoes": [
                    "Risco de liquidez",
                    "Risco de contraparte",
                    "Risco de taxa de juros",
                    "Risco cambial"
                ],
                "resposta": 1,
                "explicacao": "O principal risco associado aos derivativos OTC √© o risco de contraparte - a possibilidade de que uma das partes n√£o cumpra suas obriga√ß√µes contratuais."
            },
            {
                "pergunta": "O que √© a alavancagem em derivativos?",
                "opcoes": [
                    "A capacidade de controlar um valor substancial de ativos com um investimento relativamente pequeno",
                    "O uso de d√≠vida para financiar a compra de derivativos",
                    "A combina√ß√£o de v√°rios tipos de derivativos em uma √∫nica estrat√©gia",
                    "O aumento autom√°tico do valor do contrato ao longo do tempo"
                ],
                "resposta": 0,
                "explicacao": "Alavancagem em derivativos refere-se √† capacidade de controlar um valor substancial de ativos subjacentes com um investimento inicial relativamente pequeno, o que pode amplificar tanto ganhos quanto perdas."
            },
            {
                "pergunta": "Quais s√£o os principais participantes do mercado de derivativos?",
                "opcoes": [
                    "Apenas especuladores e investidores de varejo",
                    "Apenas bancos centrais e governos",
                    "Hedgers, especuladores e arbitradores",
                    "Apenas empresas multinacionais"
                ],
                "resposta": 2,
                "explicacao": "Os principais participantes do mercado de derivativos s√£o os hedgers (que buscam prote√ß√£o contra riscos), especuladores (que assumem riscos em busca de lucro) e arbitradores (que exploram inefici√™ncias de pre√ßos)."
            },
            {
                "pergunta": "Como os contratos futuros podem ser utilizados por produtores agr√≠colas?",
                "opcoes": [
                    "Apenas para especular com os pre√ßos das commodities",
                    "Para proteger-se contra quedas nos pre√ßos de seus produtos",
                    "Para aumentar a volatilidade de seus rendimentos",
                    "Para evitar a necessidade de vender seus produtos no mercado f√≠sico"
                ],
                "resposta": 1,
                "explicacao": "Produtores agr√≠colas podem utilizar contratos futuros para fazer hedge contra quedas nos pre√ßos de seus produtos, garantindo um pre√ßo de venda predeterminado e reduzindo a incerteza em rela√ß√£o √† receita futura."
            },
        ]
        # Agora vamos adicionar mais quest√µes para chegar a 50
        questoes_adicionais = [
            {
                "pergunta": "Qual √© a principal fun√ß√£o do mercado de derivativos na economia?",
                "opcoes": [
                    "Substituir completamente o mercado de a√ß√µes",
                    "Transferir riscos entre diferentes participantes do mercado",
                    "Garantir lucros para todos os investidores",
                    "Aumentar a volatilidade dos mercados financeiros"
                ],
                "resposta": 1,
                "explicacao": "A principal fun√ß√£o do mercado de derivativos √© transferir riscos entre diferentes participantes, permitindo que aqueles que desejam se proteger contra certos riscos possam transferi-los para aqueles dispostos a assumi-los em troca de potenciais retornos."
            },
            {
                "pergunta": "O que significa 'vender a descoberto' no mercado de derivativos?",
                "opcoes": [
                    "Vender um derivativo a qualquer pre√ßo dispon√≠vel no mercado",
                    "Vender um derivativo sem possuir o ativo subjacente",
                    "Vender um derivativo em um mercado n√£o regulamentado",
                    "Vender um derivativo com garantia de recompra"
                ],
                "resposta": 1,
                "explicacao": "Vender a descoberto significa vender um contrato derivativo sem possuir o ativo subjacente, assumindo uma posi√ß√£o especulativa baseada na expectativa de queda no pre√ßo do ativo."
            },
            {
                "pergunta": "Qual √© a diferen√ßa entre derivativos lineares e n√£o-lineares?",
                "opcoes": [
                    "Derivativos lineares t√™m prazo definido, enquanto n√£o-lineares n√£o t√™m",
                    "Derivativos lineares s√£o apenas futuros e a termo, enquanto n√£o-lineares incluem swaps",
                    "Derivativos lineares t√™m payoff proporcional ao pre√ßo do ativo subjacente, enquanto n√£o-lineares t√™m payoff assim√©trico",
                    "Derivativos lineares s√£o negociados em bolsa, enquanto n√£o-lineares s√£o OTC"
                ],
                "resposta": 2,
                "explicacao": "Derivativos lineares (como futuros e a termo) t√™m payoff que varia proporcionalmente com o pre√ßo do ativo subjacente, enquanto derivativos n√£o-lineares t√™m payoff assim√©trico que n√£o varia proporcionalmente com o pre√ßo do ativo subjacente."
            },
            {
                "pergunta": "Qual a rela√ß√£o entre liquidez e spread bid-ask nos derivativos?",
                "opcoes": [
                    "Maior liquidez geralmente resulta em spreads bid-ask mais amplos",
                    "N√£o h√° rela√ß√£o entre liquidez e spread bid-ask",
                    "Maior liquidez geralmente resulta em spreads bid-ask mais estreitos",
                    "Spreads bid-ask s√£o fixos em derivativos, independentemente da liquidez"
                ],
                "resposta": 2,
                "explicacao": "Maior liquidez geralmente resulta em spreads bid-ask mais estreitos, pois h√° mais participantes dispostos a comprar e vender, aumentando a competi√ß√£o e reduzindo os custos de transa√ß√£o."
            },
            {
                "pergunta": "O que √© a 'data de vencimento' em um contrato futuro?",
                "opcoes": [
                    "A data em que o contrato foi originalmente negociado",
                    "A √∫ltima data em que o contrato pode ser negociado ou liquidado",
                    "A data em que a margem inicial deve ser depositada",
                    "A data em que a bolsa cancela automaticamente contratos n√£o liquidados"
                ],
                "resposta": 1,
                "explicacao": "A data de vencimento √© a √∫ltima data em que um contrato futuro pode ser negociado ou liquidado, seja por entrega f√≠sica do ativo subjacente ou por liquida√ß√£o financeira."
            },
            {
                "pergunta": "Qual √© o significado do termo 'contango' no mercado de futuros?",
                "opcoes": [
                    "Quando o pre√ßo futuro est√° acima do pre√ßo √† vista esperado no futuro",
                    "Quando o pre√ßo futuro est√° abaixo do pre√ßo √† vista esperado no futuro",
                    "Quando o pre√ßo futuro e o pre√ßo √† vista s√£o exatamente iguais",
                    "Quando o mercado futuro est√° temporariamente fechado para negocia√ß√£o"
                ],
                "resposta": 0,
                "explicacao": "Contango √© uma situa√ß√£o em que o pre√ßo futuro est√° acima do pre√ßo √† vista esperado no futuro, refletindo custos de carregamento como armazenamento, seguro e custo de capital."
            },
            {
                "pergunta": "O que √© 'backwardation' no mercado de futuros?",
                "opcoes": [
                    "Quando os contratos futuros s√£o negociados apenas na dire√ß√£o de queda",
                    "Quando o pre√ßo futuro est√° abaixo do pre√ßo √† vista esperado no futuro",
                    "Quando o pre√ßo futuro e o pre√ßo √† vista s√£o exatamente iguais",
                    "Quando h√° mais vendedores do que compradores no mercado futuro"
                ],
                "resposta": 1,
                "explicacao": "Backwardation √© uma situa√ß√£o em que o pre√ßo futuro est√° abaixo do pre√ßo √† vista esperado no futuro, geralmente refletindo escassez atual ou expectativa de oferta futura maior do ativo subjacente."
            },
            {
                "pergunta": "Quais fatores afetam o pre√ßo dos contratos futuros?",
                "opcoes": [
                    "Apenas o pre√ßo atual do ativo subjacente",
                    "Pre√ßo do ativo subjacente, taxa de juros, tempo at√© o vencimento e custos de carregamento",
                    "Apenas a oferta e demanda no mercado futuro",
                    "Exclusivamente as decis√µes dos especuladores"
                ],
                "resposta": 1,
                "explicacao": "Os pre√ßos dos contratos futuros s√£o afetados por v√°rios fatores, incluindo o pre√ßo √† vista do ativo subjacente, taxas de juros, tempo at√© o vencimento, custos de carregamento (armazenamento, seguro) e expectativas de mercado."
            },
            {
                "pergunta": "Quais s√£o os riscos associados aos derivativos?",
                "opcoes": [
                    "Apenas risco de pre√ßo do ativo subjacente",
                    "Risco de mercado, risco de contraparte, risco de liquidez e risco operacional",
                    "Apenas risco de taxa de juros",
                    "N√£o h√° riscos significativos em derivativos quando usados para hedge"
                ],
                "resposta": 1,
                "explicacao": "Os derivativos envolvem m√∫ltiplos riscos, incluindo risco de mercado (mudan√ßas no valor do ativo subjacente), risco de contraparte (inadimpl√™ncia da outra parte), risco de liquidez (dificuldade de sair da posi√ß√£o) e risco operacional (falhas nos processos)."
            },
            {
                "pergunta": "Por que empresas utilizam derivativos de commodities?",
                "opcoes": [
                    "Apenas para especular com pre√ßos de mat√©rias-primas",
                    "Para garantir pre√ßos est√°veis de insumos ou produtos e reduzir a incerteza or√ßament√°ria",
                    "Para aumentar artificialmente o pre√ßo de suas a√ß√µes",
                    "Para evitar pagamento de impostos sobre commodities"
                ],
                "resposta": 1,
                "explicacao": "Empresas utilizam derivativos de commodities principalmente para garantir pre√ßos est√°veis de mat√©rias-primas (se forem consumidoras) ou de seus produtos (se forem produtoras), reduzindo a incerteza or√ßament√°ria e facilitando o planejamento financeiro."
            },
            {
                "pergunta": "Qual √© o papel dos especuladores no mercado de derivativos?",
                "opcoes": [
                    "Apenas desestabilizar os pre√ßos de mercado",
                    "Fornecer liquidez e absorver riscos que os hedgers desejam transferir",
                    "Garantir que os pre√ßos dos derivativos sejam sempre iguais aos pre√ßos √† vista",
                    "Eliminar completamente a necessidade de hedgers no mercado"
                ],
                "resposta": 1,
                "explicacao": "Os especuladores desempenham um papel importante ao fornecer liquidez ao mercado e estar dispostos a assumir riscos que os hedgers desejam transferir, facilitando a descoberta de pre√ßos e melhorando a efici√™ncia de mercado."
            },
            {
                "pergunta": "O que √© a 'converg√™ncia de pre√ßos' em contratos futuros?",
                "opcoes": [
                    "Quando os pre√ßos de todos os contratos futuros se tornam iguais",
                    "Quando o pre√ßo futuro e o pre√ßo √† vista se aproximam √† medida que o contrato se aproxima do vencimento",
                    "Quando todos os participantes do mercado concordam com um pre√ßo √∫nico",
                    "Quando o regulador imp√µe um pre√ßo fixo para equilibrar o mercado"
                ],
                "resposta": 1,
                "explicacao": "Converg√™ncia de pre√ßos refere-se ao fen√¥meno onde o pre√ßo do contrato futuro e o pre√ßo √† vista do ativo subjacente convergem √† medida que o contrato se aproxima da data de vencimento, devido √† possibilidade de arbitragem."
            },
            {
                "pergunta": "Como os bancos centrais podem usar derivativos?",
                "opcoes": [
                    "Para manipular taxas de c√¢mbio de forma ilegal",
                    "Como ferramentas de interven√ß√£o no mercado cambial e gerenciamento de reservas",
                    "Para financiar d√©ficits governamentais",
                    "Bancos centrais nunca utilizam derivativos"
                ],
                "resposta": 1,
                "explicacao": "Bancos centrais podem usar derivativos como ferramentas de pol√≠tica monet√°ria, para interven√ß√µes no mercado cambial, gerenciamento de reservas internacionais e para obter informa√ß√µes de mercado atrav√©s dos pre√ßos dos derivativos."
            },
            {
                "pergunta": "Qual √© o significado do termo 'exposi√ß√£o nocional' em derivativos?",
                "opcoes": [
                    "O valor m√°ximo que pode ser perdido em um derivativo",
                    "O valor hipot√©tico do ativo subjacente usado para calcular pagamentos",
                    "O valor do pr√™mio pago pelo derivativo",
                    "O valor da margem inicial depositada"
                ],
                "resposta": 1,
                "explicacao": "Exposi√ß√£o nocional refere-se ao valor hipot√©tico do ativo subjacente usado como refer√™ncia para calcular os pagamentos em um contrato de derivativo, n√£o representando necessariamente o risco real ou o valor efetivamente trocado."
            },
            {
                "pergunta": "O que √© o 'custo de carregamento' em contratos futuros?",
                "opcoes": [
                    "O custo de transporte f√≠sico de produtos entre diferentes mercados",
                    "Os custos associados √† manuten√ß√£o da posi√ß√£o no ativo subjacente, como armazenamento e juros",
                    "O custo das chamadas de margem durante a vida do contrato",
                    "O custo das tarifas de negocia√ß√£o impostas pela bolsa"
                ],
                "resposta": 1,
                "explicacao": "Custo de carregamento refere-se aos custos associados √† posse do ativo subjacente durante o per√≠odo do contrato, incluindo armazenamento, seguro, custos de financiamento e custos de oportunidade."
            },
            {
                "pergunta": "Como o risco de cr√©dito √© gerenciado em derivativos negociados em bolsa?",
                "opcoes": [
                    "N√£o h√° gerenciamento de risco de cr√©dito em derivativos",
                    "Atrav√©s de an√°lises de cr√©dito detalhadas de cada contraparte",
                    "Atrav√©s da c√¢mara de compensa√ß√£o, margem inicial e chamadas de margem",
                    "Exclusivamente atrav√©s de garantias governamentais"
                ],
                "resposta": 2,
                "explicacao": "Em derivativos negociados em bolsa, o risco de cr√©dito √© gerenciado principalmente atrav√©s da c√¢mara de compensa√ß√£o que atua como contraparte central, exigindo dep√≥sitos de margem inicial e realizando chamadas de margem di√°rias baseadas nas movimenta√ß√µes de pre√ßos."
            },
            {
                "pergunta": "Qual dessas N√ÉO √© uma estrat√©gia v√°lida de hedge com futuros?",
                "opcoes": [
                    "Hedge de compra (long hedge)",
                    "Hedge de venda (short hedge)",
                    "Hedge de correla√ß√£o",
                    "Hedge de elimina√ß√£o total de risco"
                ],
                "resposta": 3,
                "explicacao": "O 'hedge de elimina√ß√£o total de risco' n√£o √© uma estrat√©gia v√°lida, pois hedges com derivativos geralmente n√£o eliminam todos os riscos, especialmente o risco de base. As estrat√©gias leg√≠timas incluem hedge de compra, hedge de venda e hedge de correla√ß√£o (cross hedging)."
            },
            {
                "pergunta": "O que √© um 'rollover' de contrato futuro?",
                "opcoes": [
                    "Encerrar uma posi√ß√£o em um contrato prestes a vencer e abrir uma posi√ß√£o similar em um contrato com vencimento posterior",
                    "Solicitar a entrega f√≠sica do ativo subjacente",
                    "Cancelar um contrato futuro antes do vencimento sem penalidades",
                    "Transferir um contrato futuro para outra bolsa de valores"
                ],
                "resposta": 0,
                "explicacao": "Rollover refere-se √† pr√°tica de encerrar uma posi√ß√£o em um contrato futuro prestes a vencer e simultaneamente abrir uma posi√ß√£o similar em um contrato com vencimento posterior, permitindo manter a exposi√ß√£o ao mercado sem lidar com o vencimento do contrato original."
            },
            {
                "pergunta": "O que significa 'netting' em transa√ß√µes de derivativos?",
                "opcoes": [
                    "O processo de combinar m√∫ltiplas posi√ß√µes ou obriga√ß√µes para reduzir o risco e as transfer√™ncias de valor",
                    "A pr√°tica de adicionar novas posi√ß√µes para aumentar a exposi√ß√£o",
                    "O c√°lculo de lucros l√≠quidos de todas as transa√ß√µes de derivativos",
                    "A inclus√£o de taxas adicionais em contratos de derivativos"
                ],
                "resposta": 0,
                "explicacao": "Netting refere-se ao processo de combinar m√∫ltiplas posi√ß√µes ou obriga√ß√µes entre contrapartes para chegar a um valor l√≠quido a ser transferido, reduzindo o risco de contraparte e o n√∫mero/volume de liquida√ß√µes necess√°rias."
            },
            {
                "pergunta": "O que √© um contrato futuro 'cash settled'?",
                "opcoes": [
                    "Um contrato que s√≥ pode ser comprado com dinheiro √† vista",
                    "Um contrato onde a liquida√ß√£o ocorre financeiramente sem entrega f√≠sica do ativo subjacente",
                    "Um contrato que exige pagamento antecipado completo",
                    "Um contrato onde apenas institui√ß√µes financeiras podem participar"
                ],
                "resposta": 1,
                "explicacao": "Um contrato futuro 'cash settled' (liquida√ß√£o financeira) √© aquele em que, no vencimento, n√£o h√° entrega f√≠sica do ativo subjacente, mas sim a liquida√ß√£o financeira baseada na diferen√ßa entre o pre√ßo contratado e o pre√ßo de refer√™ncia final do ativo."
            },
            {
                "pergunta": "Qual √© a diferen√ßa entre hedge est√°tico e hedge din√¢mico?",
                "opcoes": [
                    "Hedge est√°tico √© feito apenas uma vez, enquanto hedge din√¢mico envolve ajustes frequentes da posi√ß√£o",
                    "Hedge est√°tico usa apenas um tipo de derivativo, enquanto hedge din√¢mico usa m√∫ltiplos tipos",
                    "Hedge est√°tico √© apenas para commodities, enquanto hedge din√¢mico √© para instrumentos financeiros",
                    "Hedge est√°tico √© ilegal na maioria dos pa√≠ses, enquanto hedge din√¢mico √© permitido"
                ],
                "resposta": 0,
                "explicacao": "Hedge est√°tico envolve estabelecer uma posi√ß√£o de hedge e mant√™-la inalterada at√© o vencimento, enquanto hedge din√¢mico envolve ajustes frequentes da posi√ß√£o de hedge em resposta √†s mudan√ßas no mercado e nas condi√ß√µes do ativo sendo protegido."
            },
        ]
        
        # Combinar as listas de quest√µes
        todas_questoes = questoes_base + questoes_adicionais
        
        # Embaralhar as alternativas de cada quest√£o para distribuir as respostas corretas
        for questao in todas_questoes:
            # Guarda a resposta correta
            resposta_correta = questao["opcoes"][questao["resposta"]]
            
            # Embaralha as op√ß√µes
            opcoes_embaralhadas = questao["opcoes"].copy()
            random.shuffle(opcoes_embaralhadas)
            
            # Atualiza a quest√£o com as op√ß√µes embaralhadas
            questao["opcoes"] = opcoes_embaralhadas
            
            # Encontra o novo √≠ndice da resposta correta
            questao["resposta"] = opcoes_embaralhadas.index(resposta_correta)
        
        return todas_questoes

    # Mensagens de feedback divertidas
    feedback_correto = [
        "üéâ Acertou! Voc√™ est√° mandando bem nos derivativos!",
        "‚úÖ Correto! Est√° no caminho certo para se tornar um especialista!",
        "üî• Resposta correta! Isso a√≠, continue assim!",
        "üëç Exato! Seu professor ficaria orgulhoso!",
        "üåü Perfeito! Voc√™ entendeu o conceito muito bem!"
    ]

    feedback_incorreto = [
        "‚ùå Ops! N√£o foi dessa vez. Mas n√£o desanime!",
        "üòÖ Resposta incorreta, mas errar faz parte do aprendizado!",
        "ü§î Hmm, n√£o est√° certo. Vamos revisar esse conceito?",
        "üìö Incorreto! Sugest√£o: reveja esta parte do material!",
        "üßê N√£o √© essa a resposta. Mas voc√™ est√° aprendendo!"
    ]

        # Fun√ß√£o para selecionar quest√µes aleat√≥rias
    def selecionar_questoes_aleatorias(banco_questoes, quantidade=10):
        # Filtrar quest√µes para remover qualquer men√ß√£o a op√ß√µes
        banco_filtrado = [q for q in banco_questoes if "op√ß√£o" not in q["pergunta"].lower() and 
                        "call" not in q["pergunta"].lower() and 
                        "put" not in q["pergunta"].lower()]
        
        if quantidade > len(banco_filtrado):
            quantidade = len(banco_filtrado)
        return random.sample(banco_filtrado, quantidade)

    # Fun√ß√£o para exibir quest√£o
    def exibir_questao(questao, indice):
        st.subheader(f"Quest√£o {indice + 1}")
        st.write(questao["pergunta"])
        opcao_selecionada = st.radio("Escolha uma op√ß√£o:", questao["opcoes"], key=f"q{indice}")
        indice_opcao = questao["opcoes"].index(opcao_selecionada)
        
        if st.button("Responder", key=f"responder{indice}"):
            if indice_opcao == questao["resposta"]:
                st.success(random.choice(feedback_correto))
                st.session_state[f"pontos_q{indice}"] = 1
            else:
                st.error(random.choice(feedback_incorreto))
                st.session_state[f"pontos_q{indice}"] = 0
            
            st.info(f"**Explica√ß√£o:** {questao['explicacao']}")
            
            # Mostre a resposta correta se o usu√°rio errou
            if indice_opcao != questao["resposta"]:
                st.write(f"**Resposta correta:** {questao['opcoes'][questao['resposta']]}")
        
        # Adicionar espa√ßador entre quest√µes
        st.markdown("---")

    # Interface principal
    def main():
        st.title("Quiz de Derivativos")
        st.markdown("""
        ### Bem-vindo ao question√°rio interativo sobre Introdu√ß√£o aos Derivativos!
        
        Este quiz cont√©m 10 quest√µes de m√∫ltipla escolha para testar seus conhecimentos sobre derivativos financeiros.
        Cada vez que voc√™ clicar em "Gerar Novo Question√°rio", um conjunto diferente de perguntas ser√° selecionado.
        
        Boa sorte! üìäüìà
        """)
        
        # Inicializar ou resetar o quiz
        if st.button("Gerar Novo Question√°rio") or "questoes" not in st.session_state:
            banco_questoes = gerar_banco_questoes()
            st.session_state.questoes = selecionar_questoes_aleatorias(banco_questoes)
            
            # Resetar pontua√ß√£o
            for i in range(len(st.session_state.questoes)):
                st.session_state[f"pontos_q{i}"] = 0
        
        # Exibir as quest√µes
        for i, questao in enumerate(st.session_state.questoes):
            exibir_questao(questao, i)
        
        # Calcular e exibir pontua√ß√£o total
        if "questoes" in st.session_state:
            pontos_total = sum([st.session_state.get(f"pontos_q{i}", 0) for i in range(len(st.session_state.questoes))])
            
            # S√≥ mostrar pontua√ß√£o se pelo menos uma quest√£o foi respondida
            if sum([1 for i in range(len(st.session_state.questoes)) if f"pontos_q{i}" in st.session_state]) > 0:
                st.sidebar.header("Seu Desempenho")
                st.sidebar.metric("Pontua√ß√£o", f"{pontos_total}/{len(st.session_state.questoes)}")
                
                # Mostrar mensagem baseada na pontua√ß√£o
                porcentagem = (pontos_total / len(st.session_state.questoes)) * 100
                if porcentagem >= 90:
                    st.sidebar.success("üèÜ Excelente! Voc√™ domina os derivativos!")
                elif porcentagem >= 70:
                    st.sidebar.success("üéì Muito bom! Voc√™ tem um bom conhecimento!")
                elif porcentagem >= 50:
                    st.sidebar.info("üìö Bom trabalho! Continue estudando!")
                else:
                    st.sidebar.warning("üìù Continue praticando. Voc√™ consegue melhorar!")

    if __name__ == "__main__":
        main()
    

# Step 2: Derivativos
elif st.session_state.step == "Derivativos":

    st.write("---")
    st.markdown("<h5 style='text-align: center;'>Escolha seu Derivativo</h5>", unsafe_allow_html=True)
    st.write("---")
    
    col1, col2, col3 = st.columns([4, 1, 4])
    with col1:
        st.button("Termos", type='primary', use_container_width=True, on_click=select_option, args=("Termos",))
            
    with col3:
        st.button("Futuros", type='primary', use_container_width=True, on_click=select_option, args=("Futuros",))

    col4, col5, col6 = st.columns([4, 1, 4])
    with col4:
        st.button("Swaps", type='primary', use_container_width=True, on_click=select_option, args=("Swaps",))

    with col6:
        st.button("Options", type='primary', use_container_width=True, on_click=select_option, args=("Options",))
        
    # Handle button selection logic
    if st.session_state.selected_option:
        st.write("---")
        st.markdown(f"<h3 style='text-align: center;'><b>{st.session_state.selected_option}</b></h3>", unsafe_allow_html=True)
        st.write("---")

        # Instructions based on selection
        if st.session_state.selected_option == "Swaps":

            # Enums and dataclasses
            class IndexerType(Enum):
                PRE_FIXED = "Pre-fixed"
                POST_FIXED = "Post-fixed"
                EXCHANGE_RATE = "Exchange Rate"

            class ExposureType(Enum):
                ASSET = "Asset"
                LIABILITY = "Liability"

            @dataclass
            class SwapParameters:
                exposure_type: ExposureType
                notional: float
                indexer: IndexerType
                rate: float
                quarters: int
                cupom_cambial: float = None
                exchange_rate_start: float = None

            @dataclass
            class HedgeParameters:
                asset_indexer: IndexerType
                liability_indexer: IndexerType
                asset_rate: float
                liability_rate: float
                asset_cupom_cambial: float = None
                liability_cupom_cambial: float = None
                exchange_rate_maturity: float = None

            class SwapCalculator:
                def __init__(self, swap_params: SwapParameters, hedge_params: HedgeParameters):
                    self.swap_params = swap_params
                    self.hedge_params = hedge_params
                
                def _calculate_pre_fixed_adjustment(self, rate, quarters):
                    return (1 + rate) ** (quarters/4) - 1
                
                def _calculate_exposure_exchange_rate_adjustment(self, initial_rate, final_rate, rate, quarters):
                    if initial_rate is None or final_rate is None:
                        raise ValueError("Exchange rates must be provided for exchange rate calculations")
                        
                    # Calculate exchange rate variation
                    exchange_variation = (final_rate / initial_rate) - 1
                    
                    # Calculate the rate adjustment using compound interest
                    rate_adjustment = (1 + rate) ** (quarters/4) - 1
                    
                    # Combine both effects using compound interest
                    total_adjustment = (1 + exchange_variation) * (1 + rate_adjustment) - 1
                    
                    return total_adjustment
                
                def _calculate_hedge_exchange_rate_adjustment(self, initial_rate, final_rate, cupom_cambial, quarters):
                    if initial_rate is None or final_rate is None:
                        raise ValueError("Exchange rates must be provided for exchange rate calculations")
                        
                    # Calculate exchange rate variation
                    exchange_variation = (final_rate / initial_rate) - 1
                    
                    # Calculate the cupom cambial adjustment
                    cupom_adjustment = (1 + cupom_cambial) ** (quarters/4) - 1
                    
                    # Combine both effects using compound interest
                    total_adjustment = (1 + exchange_variation) * (1 + cupom_adjustment) - 1
                    
                    return total_adjustment
                
                def calculate_exposure_result(self):
                    if self.swap_params.indexer == IndexerType.PRE_FIXED:
                        adjustment = self._calculate_pre_fixed_adjustment(self.swap_params.rate, self.swap_params.quarters)
                    elif self.swap_params.indexer == IndexerType.POST_FIXED:
                        adjustment = self.swap_params.rate
                    else:  # Exchange Rate
                        adjustment = self._calculate_exposure_exchange_rate_adjustment(
                            self.swap_params.exchange_rate_start,
                            self.hedge_params.exchange_rate_maturity,
                            self.swap_params.rate,  # Using rate for exposure
                            self.swap_params.quarters
                        )
                        
                    result = self.swap_params.notional * adjustment
                    return result if self.swap_params.exposure_type == ExposureType.ASSET else -result
                
                def calculate_hedge_result(self):
                    # Calculate asset leg
                    if self.hedge_params.asset_indexer == IndexerType.PRE_FIXED:
                        asset_adjustment = self._calculate_pre_fixed_adjustment(self.hedge_params.asset_rate, self.swap_params.quarters)
                    elif self.hedge_params.asset_indexer == IndexerType.POST_FIXED:
                        asset_adjustment = self.hedge_params.asset_rate
                    else:  # Exchange Rate
                        asset_adjustment = self._calculate_hedge_exchange_rate_adjustment(
                            self.swap_params.exchange_rate_start,
                            self.hedge_params.exchange_rate_maturity,
                            self.hedge_params.asset_cupom_cambial,  # Using cupom cambial for hedge
                            self.swap_params.quarters
                        )
                        
                    # Calculate liability leg
                    if self.hedge_params.liability_indexer == IndexerType.PRE_FIXED:
                        liability_adjustment = self._calculate_pre_fixed_adjustment(self.hedge_params.liability_rate, self.swap_params.quarters)
                    elif self.hedge_params.liability_indexer == IndexerType.POST_FIXED:
                        liability_adjustment = self.hedge_params.liability_rate
                    else:  # Exchange Rate
                        liability_adjustment = self._calculate_hedge_exchange_rate_adjustment(
                            self.swap_params.exchange_rate_start,
                            self.hedge_params.exchange_rate_maturity,
                            self.hedge_params.liability_cupom_cambial,  # Using cupom cambial for hedge
                            self.swap_params.quarters
                        )
                        
                    asset_result = self.swap_params.notional * asset_adjustment
                    liability_result = self.swap_params.notional * liability_adjustment
                    return asset_result - liability_result
                
                def calculate_total_result(self):
                    exposure_result = self.calculate_exposure_result()
                    hedge_result = self.calculate_hedge_result()
                    return {
                        'exposure_result': exposure_result,
                        'hedge_result': hedge_result,
                        'total_result': exposure_result + hedge_result
                    }

                def generate_time_series(self):
                    """Generate time series data for plotting."""
                    # Create time points (one point per quarter)
                    quarters = np.arange(self.swap_params.quarters + 1)  # Include start point
                    
                    exposure_values = []
                    asset_values = []
                    liability_values = []
                    
                    # Check if we need to handle exchange rates
                    has_exchange_rate = (self.swap_params.indexer == IndexerType.EXCHANGE_RATE or 
                                        self.hedge_params.asset_indexer == IndexerType.EXCHANGE_RATE or 
                                        self.hedge_params.liability_indexer == IndexerType.EXCHANGE_RATE)
                    
                    for q in quarters:
                        # For quarter 0, all values are 0
                        if q == 0:
                            exposure_values.append(0)
                            asset_values.append(0)
                            liability_values.append(0)
                            continue
                        
                        # Initialize exchange variation
                        exchange_variation = 0
                            
                        # Calculate exchange rate at current quarter if needed
                        if has_exchange_rate:
                            current_fx = self.swap_params.exchange_rate_start + \
                                (self.hedge_params.exchange_rate_maturity - self.swap_params.exchange_rate_start) * \
                                (q / self.swap_params.quarters)
                            exchange_variation = (current_fx / self.swap_params.exchange_rate_start) - 1
                        
                        # Calculate exposure values
                        if self.swap_params.indexer == IndexerType.PRE_FIXED:
                            exposure_adj = self._calculate_pre_fixed_adjustment(self.swap_params.rate, q)
                        elif self.swap_params.indexer == IndexerType.POST_FIXED:
                            exposure_adj = self.swap_params.rate * (q / self.swap_params.quarters)
                        else:  # Exchange Rate
                            rate_adj = (1 + self.swap_params.rate) ** (q/4) - 1
                            exposure_adj = (1 + exchange_variation) * (1 + rate_adj) - 1
                        
                        exposure_value = self.swap_params.notional * exposure_adj
                        exposure_values.append(-exposure_value if self.swap_params.exposure_type == ExposureType.LIABILITY else exposure_value)
                        
                        # Calculate asset leg values
                        if self.hedge_params.asset_indexer == IndexerType.PRE_FIXED:
                            asset_adj = self._calculate_pre_fixed_adjustment(self.hedge_params.asset_rate, q)
                        elif self.hedge_params.asset_indexer == IndexerType.POST_FIXED:
                            asset_adj = self.hedge_params.asset_rate * (q / self.swap_params.quarters)
                        else:  # Exchange Rate
                            cupom_adj = (1 + self.hedge_params.asset_cupom_cambial) ** (q/4) - 1
                            asset_adj = (1 + exchange_variation) * (1 + cupom_adj) - 1
                        
                        asset_values.append(self.swap_params.notional * asset_adj)
                        
                        # Calculate liability leg values (now making it negative)
                        if self.hedge_params.liability_indexer == IndexerType.PRE_FIXED:
                            liability_adj = self._calculate_pre_fixed_adjustment(self.hedge_params.liability_rate, q)
                        elif self.hedge_params.liability_indexer == IndexerType.POST_FIXED:
                            liability_adj = self.hedge_params.liability_rate * (q / self.swap_params.quarters)
                        else:  # Exchange Rate
                            cupom_adj = (1 + self.hedge_params.liability_cupom_cambial) ** (q/4) - 1
                            liability_adj = (1 + exchange_variation) * (1 + cupom_adj) - 1
                        
                        # Make liability negative since it's a payment obligation
                        liability_values.append(-self.swap_params.notional * liability_adj)
                    
                    # Calculate net position
                    net_values = [e + a + l for e, a, l in zip(exposure_values, asset_values, liability_values)]  # Note: liability is already negative
                    
                    return {
                        'quarters': quarters,
                        'exposure': exposure_values,
                        'asset': asset_values,
                        'liability': liability_values,
                        'net': net_values
                    }   

                def generate_report(self):
                    results = self.calculate_total_result()
                    
                    report = f"""

            Swap Hedge Analysis Report
            -------------------------
            Period: {self.swap_params.quarters} quarters ({self.swap_params.quarters/4:.2f} years)

            Exposure Details:
            - Type: {self.swap_params.exposure_type.value}
            - Notional: R$ {self.swap_params.notional:,.2f}
            - Indexer: {self.swap_params.indexer.value}
            - Rate: {self.swap_params.rate:.2%}
            {f'- Cupom Cambial: {self.swap_params.cupom_cambial:.2%}' if self.swap_params.cupom_cambial else ''}
            {f'- Initial Exchange Rate: {self.swap_params.exchange_rate_start:.4f}' if self.swap_params.exchange_rate_start else ''}

            Hedge Details:
            Asset Leg:
            - Indexer: {self.hedge_params.asset_indexer.value}
            - Rate: {self.hedge_params.asset_rate:.2%}
            {f'- Cupom Cambial: {self.hedge_params.asset_cupom_cambial:.2%}' if self.hedge_params.asset_cupom_cambial else ''}

            Liability Leg:
            - Indexer: {self.hedge_params.liability_indexer.value}
            - Rate: {self.hedge_params.liability_rate:.2%}
            {f'- Cupom Cambial: {self.hedge_params.liability_cupom_cambial:.2%}' if self.hedge_params.liability_cupom_cambial else ''}
            {f'- Final Exchange Rate: {self.hedge_params.exchange_rate_maturity:.4f}' if self.hedge_params.exchange_rate_maturity else ''}

            Results:
            - Exposure Result: R$ {results['exposure_result']:,.2f}
            - Swap P&L: R$ {results['hedge_result']:,.2f}
            - Total Result: R$ {results['total_result']:,.2f}

            Analysis:
            The {self.swap_params.exposure_type.value.lower()} exposure generated a {'profit' if results['exposure_result'] > 0 else 'loss'} of R$ {abs(results['exposure_result']):,.2f}.
            The hedge operation generated a {'profit' if results['hedge_result'] > 0 else 'loss'} of R$ {abs(results['hedge_result']):,.2f}.
            The combined position resulted in a {'profit' if results['total_result'] > 0 else 'loss'} of R$ {abs(results['total_result']):,.2f}.
            """
                    return report



            st.title("Brazilian Swap Calculator")
            st.markdown("""
            This application helps you calculate and analyze swap operations in the Brazilian market.
            Please fill in the details below for both your exposure and the hedge operation.
            """)

            # Create two columns for exposure and hedge
            col1, col2 = st.columns(2)

            with col1:
                st.header("Exposure Details")
                
                exposure_type = st.selectbox(
                    "Exposure Type",
                    options=[ExposureType.ASSET.value, ExposureType.LIABILITY.value],
                    key="exposure_type"
                )
                
                notional = st.number_input(
                    "Notional Amount (R$)",
                    min_value=0.0,
                    value=1000000.0,
                    step=100000.0,
                    format="%f",
                    key="notional"
                )
                
                exposure_indexer = st.selectbox(
                    "Indexer",
                    options=[idx.value for idx in IndexerType],
                    key="exposure_indexer"
                )
                
                exposure_rate = st.number_input(
                    "Rate (as decimal, e.g., 0.12 for 12%)",
                    min_value=0.0,
                    max_value=1.0,
                    value=0.12,
                    step=0.01,
                    format="%f",
                    key="exposure_rate"
                )
                
                if exposure_indexer == IndexerType.EXCHANGE_RATE.value:
                    exposure_exchange_rate = st.number_input(
                        "Initial Exchange Rate (BRL/USD)",
                        min_value=0.0,
                        value=5.0,
                        step=0.1,
                        format="%f",
                        key="exposure_exchange_rate"
                    )
                
                quarters = st.number_input(
                    "Number of Quarters",
                    min_value=1,
                    max_value=40,  # 10 years
                    value=4,  # Default to 1 year
                    step=1,
                    key="quarters"
                )

            with col2:
                st.header("Hedge Details")
                
                # Asset leg
                st.subheader("Asset Leg")
                asset_indexer = st.selectbox(
                    "Asset Indexer",
                    options=[idx.value for idx in IndexerType],
                    key="asset_indexer"
                )
                
                if asset_indexer != IndexerType.EXCHANGE_RATE.value:
                    asset_rate = st.number_input(
                        "Asset Rate (as decimal)",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.115,
                        step=0.01,
                        format="%f",
                        key="asset_rate"
                    )
                
                if asset_indexer == IndexerType.EXCHANGE_RATE.value:
                    asset_cupom = st.number_input(
                        "Asset Cupom Cambial (as decimal)",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.05,
                        step=0.01,
                        format="%f",
                        key="asset_cupom"
                    )
                
                # Liability leg
                st.subheader("Liability Leg")
                liability_indexer = st.selectbox(
                    "Liability Indexer",
                    options=[idx.value for idx in IndexerType],
                    key="liability_indexer"
                )
                
                if liability_indexer != IndexerType.EXCHANGE_RATE.value:
                    liability_rate = st.number_input(
                        "Liability Rate (as decimal)",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.12,
                        step=0.01,
                        format="%f",
                        key="liability_rate"
                    )
                
                if liability_indexer == IndexerType.EXCHANGE_RATE.value:
                    liability_cupom = st.number_input(
                        "Liability Cupom Cambial (as decimal)",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.05,
                        step=0.01,
                        format="%f",
                        key="liability_cupom"
                    )

                # Exchange rate at maturity (shown if any leg uses exchange rate)
                if (asset_indexer == IndexerType.EXCHANGE_RATE.value or 
                    liability_indexer == IndexerType.EXCHANGE_RATE.value or 
                    exposure_indexer == IndexerType.EXCHANGE_RATE.value):
                    exchange_rate_maturity = st.number_input(
                        "Exchange Rate at Maturity (BRL/USD)",
                        min_value=0.0,
                        value=5.2,
                        step=0.1,
                        format="%f",
                        key="exchange_rate_maturity"
                    )

            # Calculate button
            if st.button("Calculate Swap Results"):
                # Create parameters objects
                swap_params = SwapParameters(
                    exposure_type=ExposureType(exposure_type),
                    notional=float(notional),
                    indexer=IndexerType(exposure_indexer),
                    rate=float(exposure_rate),
                    quarters=int(quarters),
                    exchange_rate_start=float(exposure_exchange_rate) if exposure_indexer == IndexerType.EXCHANGE_RATE.value else None
                )
                
                hedge_params = HedgeParameters(
                    asset_indexer=IndexerType(asset_indexer),
                    liability_indexer=IndexerType(liability_indexer),
                    asset_rate=float(asset_rate) if asset_indexer != IndexerType.EXCHANGE_RATE.value else 0.0,
                    liability_rate=float(liability_rate) if liability_indexer != IndexerType.EXCHANGE_RATE.value else 0.0,
                    asset_cupom_cambial=float(asset_cupom) if asset_indexer == IndexerType.EXCHANGE_RATE.value else None,
                    liability_cupom_cambial=float(liability_cupom) if liability_indexer == IndexerType.EXCHANGE_RATE.value else None,
                    exchange_rate_maturity=float(exchange_rate_maturity) if (asset_indexer == IndexerType.EXCHANGE_RATE.value or 
                                                                        liability_indexer == IndexerType.EXCHANGE_RATE.value or
                                                                        exposure_indexer == IndexerType.EXCHANGE_RATE.value) else None
                )
                
                # Calculate results
                calculator = SwapCalculator(swap_params, hedge_params)
                results = calculator.calculate_total_result()
                
                # Display results
                st.header("Results")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        "Exposure Result",
                        f"R$ {results['exposure_result']:,.2f}",
                        delta=None
                    )
                
                with col2:
                    st.metric(
                        "Swap P&L",
                        f"R$ {results['hedge_result']:,.2f}",
                        delta=None
                    )
                
                with col3:
                    st.metric(
                        "Total Result / Net Position",
                        f"R$ {results['total_result']:,.2f}",
                        delta=None
                    )
                
                # Display detailed report
                st.header("Detailed Report")
                st.text(calculator.generate_report())


                # After displaying the detailed report, add the plot
                st.header("Position Evolution Over Time")
                
                # Generate time series data
                time_series = calculator.generate_time_series()
                
                # Create the plot
                fig = go.Figure()
                
                # Add traces
                fig.add_trace(go.Scatter(
                    x=time_series['quarters'],
                    y=time_series['exposure'],
                    name='Exposure',
                    line=dict(color='blue'),
                    mode='lines+markers'
                ))
                
                fig.add_trace(go.Scatter(
                    x=time_series['quarters'],
                    y=time_series['asset'],
                    name='Asset Leg',
                    line=dict(color='green'),
                    mode='lines+markers'
                ))
                
                fig.add_trace(go.Scatter(
                    x=time_series['quarters'],
                    y=time_series['liability'],
                    name='Liability Leg',
                    line=dict(color='red'),
                    mode='lines+markers'
                ))
                
                fig.add_trace(go.Scatter(
                    x=time_series['quarters'],
                    y=time_series['net'],
                    name='Net Position',
                    line=dict(color='purple', dash='dash'),
                    mode='lines+markers'
                ))
                
                # Update layout
                fig.update_layout(
                    title='Evolution of Positions Over Time',
                    xaxis_title='Quarters',
                    yaxis_title='Value (R$)',
                    hovermode='x unified',
                    xaxis=dict(
                        tickmode='array',
                        ticktext=[f'Q{q}' for q in time_series['quarters']],
                        tickvals=time_series['quarters']
                    )
                )
                
                # Display the plot
                st.plotly_chart(fig, use_container_width=True)
                
                # Add plot explanation
                st.markdown("""
                ### Plot Explanation
                - **Blue line**: Shows the exposure position over time
                - **Green line**: Shows the asset leg of the hedge over time
                - **Red line**: Shows the liability leg of the hedge over time
                - **Purple dashed line**: Shows the net position (Exposure + Asset - Liability)
                
                The plot shows the evolution of values from inception (Q0) to maturity, with points at each quarter.
                All values start at zero and evolve according to their respective rates and adjustments.
                """)

            # Add some helpful information at the bottom
            st.markdown("""
            ---
            ### How to use this calculator:

            1. Fill in the exposure details on the left side:
            - Select exposure type (Asset/Liability)
            - Enter notional amount
            - Choose indexer type
            - Enter the rate for all indexer types
            - For exchange rate indexer, also enter the initial exchange rate
            - Specify number of quarters

            2. Fill in the hedge details on the right side:
            - Configure both asset and liability legs
            - Enter rates for all legs
            - For exchange rate legs, also enter the cupom cambial
            - If any leg uses exchange rate, specify the exchange rate at maturity

            3. Click "Calculate Swap Results" to see the analysis

            Note: All rates should be entered as decimals (e.g., 0,12 for 12%)
            """)

        # Instructions based on selection
        if st.session_state.selected_option == "Termos":

            # CSS customizado para melhorar o visual
            st.markdown("""
            <style>
                .main > div {
                    padding-top: 2rem;
                }
                
                .stSelectbox > div > div {
                    background-color: #f8f9fa;
                }
                
                .stNumberInput > div > div {
                    background-color: #f8f9fa;
                }

                .metric-container {
                    background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
                    padding: 0.5rem;
                    border-radius: 10px;
                    color: white;
                    margin: 0.8rem 0;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                }
                
                .metric-value {
                    font-size: 1.3rem;
                    font-weight: bold;
                    margin: 0.3rem 0;
                }
                
                .metric-label {
                    font-size: 0.95rem;
                    opacity: 1;
                }
                
                .profit-positive {
                    color: green;
                }
                
                .profit-negative {
                    color: gold;
                }
                
                .info-box {
                    background: #e8f6ff;
                    padding: 1.5rem;
                    border-radius: 10px;
                    border-left: 4px solid #3498db;
                    margin: 1rem 0;
                }
                
                .formula-box {
                    background: #f8f9fa;
                    padding: 0.3rem;
                    border-radius: 8px;
                    border-left: 1px solid #17a2b8;
                    font-family: 'Courier New', monospace;
                    margin: 0.2rem 0;
                }
                
                .header-container {
                    text-align: center;
                    padding: 1rem 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    margin: -2rem -3rem 2rem -3rem;
                    border-radius: 0 0 20px 20px;
                    color: white;
                }
                
                .header-title {
                    font-size: 3rem;
                    font-weight: 300;
                    margin-bottom: 0.5rem;
                }
                
                .header-subtitle {
                    font-size: 1.2rem;
                    opacity: 0.9;
                }
                
                .currency-label {
                    font-size: 0.9rem;
                    color: #666;
                    margin-top: 0.2rem;
                }
            </style>
            """, unsafe_allow_html=True)

            # Fun√ß√µes auxiliares
            def formatar_moeda_brl(valor):
                """Formata valor como moeda brasileira"""
                return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

            def formatar_moeda_usd(valor):
                """Formata valor como d√≥lares americanos"""
                return f"US$ {valor:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")

            def formatar_cotacao(valor):
                """Formata cota√ß√£o com 2 casas decimais"""
                return f"R$ {valor:.2f}"

            def calcular_resultado_ndf(operacao, cotacao_contratacao, cotacao_vencimento, valor_nocional_usd):
                """
                Calcula o resultado da opera√ß√£o NDF conforme as f√≥rmulas:
                Compra: (Cota√ß√£o Vencimento - Cota√ß√£o Contrata√ß√£o) √ó N
                Venda: (Cota√ß√£o Contrata√ß√£o - Cota√ß√£o Vencimento) √ó N
                """
                if operacao == "Compra":
                    resultado = (cotacao_vencimento - cotacao_contratacao) * valor_nocional_usd
                else:  # Venda
                    resultado = (cotacao_contratacao - cotacao_vencimento) * valor_nocional_usd
                
                return resultado

            def calcular_valor_inicial_brl(cotacao_contratacao, valor_nocional_usd):
                """Calcula valor inicial em reais para refer√™ncia"""
                return cotacao_contratacao * valor_nocional_usd

            def calcular_valor_final_brl(cotacao_vencimento, valor_nocional_usd):
                """Calcula valor final em reais para refer√™ncia"""
                return cotacao_vencimento * valor_nocional_usd

            # Cabe√ßalho da aplica√ß√£o
            st.markdown("""
            <div class="header-container">
                <h1 class="header-title">üí± Simulador de Contratos NDF</h1>
                <p class="header-subtitle">Ferramenta educacional para entender Non-Deliverable Forwards de USD/BRL</p>
            </div>
            """, unsafe_allow_html=True)

            # Caixa de informa√ß√µes
            st.markdown("""
            <div class="info-box">
                <h3>‚ÑπÔ∏è O que √© um NDF?</h3>
                <p>O <strong>NDF (Non-Deliverable Forward)</strong> √© um contrato a termo de c√¢mbio com liquida√ß√£o financeira. 
                A diferen√ßa entre a cota√ß√£o acordada e a cota√ß√£o de refer√™ncia no vencimento √© liquidada em moeda local (reais), 
                <strong>sem entrega f√≠sica</strong> da moeda americana.</p>
            </div>
            """, unsafe_allow_html=True)

            # Layout de inputs
            st.markdown("## üéØ Par√¢metros da Opera√ß√£o NDF")

            st.write("A cota√ß√£o da moeda americana no mercado √† vista na data da contrata√ß√£o √© de 5,00 (BRL/USD)")

            col1, col2 = st.columns(2)

            with col1:
                st.subheader("üìã Dados da Opera√ß√£o")
                
                operacao = st.selectbox(
                    "Tipo de Opera√ß√£o:",
                    ["Compra", "Venda"],
                    help="Compra: Voc√™ lucra se o d√≥lar subir. Venda: Voc√™ lucra se o d√≥lar descer."
                )
                
                valor_nocional_milhoes = st.number_input(
                    "Valor Nocional (US$ milh√µes):",
                    min_value=1.0,
                    max_value=100.0,
                    value=10.0,
                    step=1.0,
                    format="%.0f",
                    help="Valor da opera√ß√£o em milh√µes de d√≥lares americanos"
                )
                
                st.markdown('<div class="currency-label">Valor em USD para c√°lculo dos resultados</div>', unsafe_allow_html=True)

            with col2:
                st.subheader("üí≤ Cota√ß√µes USD/BRL")
                
                cotacao_contratacao = st.number_input(
                    "Cota√ß√£o do NDF na data da contrata√ß√£o (BRL/USD):",
                    min_value=1.0000,
                    max_value=10.0000,
                    value=5.2000,
                    step=0.0100,
                    format="%.2f",
                    help="Taxa de c√¢mbio BRL/USD acordada no momento da contrata√ß√£o"
                )
                
                cotacao_vencimento = st.number_input(
                    "Cota√ß√£o do NDF no Vencimento (BRL/USD):",
                    min_value=1.0000,
                    max_value=10.0000,
                    value=5.5000,
                    step=0.0100,
                    format="%.2f",
                    help="Taxa de c√¢mbio BRL/USD na data de vencimento (1 ano depois)"
                )
                
                st.markdown('<div class="currency-label">Valores em Reais por D√≥lar</div>', unsafe_allow_html=True)

            # Realizar c√°lculos
            valor_nocional_usd = valor_nocional_milhoes * 1000000  # Converter para valor total em USD
            resultado_operacao = calcular_resultado_ndf(operacao, cotacao_contratacao, cotacao_vencimento, valor_nocional_usd)
            valor_inicial_brl = calcular_valor_inicial_brl(cotacao_contratacao, valor_nocional_usd)
            valor_final_brl = calcular_valor_final_brl(cotacao_vencimento, valor_nocional_usd)
            diferenca_cotacao = cotacao_vencimento - cotacao_contratacao
            variacao_percentual = (diferenca_cotacao / cotacao_contratacao) * 100

            # Exibir resultados em cart√µes coloridos
            st.markdown("## üìä Resultados da Opera√ß√£o NDF")

            # Layout dos resultados em colunas
            res_col1, res_col2, res_col3, res_col4 = st.columns(4)

            with res_col1:
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-label">Valor Nocional</div>
                    <div class="metric-value">{formatar_moeda_usd(valor_nocional_usd)}</div>
                </div>
                """, unsafe_allow_html=True)

            with res_col2:
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-label">Varia√ß√£o do USD</div>
                    <div class="metric-value">{variacao_percentual:+.2f}%</div>
                </div>
                """, unsafe_allow_html=True)

            with res_col3:
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-label">Diferen√ßa de Cota√ß√£o</div>
                    <div class="metric-value">{formatar_cotacao(diferenca_cotacao)}</div>
                </div>
                """, unsafe_allow_html=True)

            with res_col4:
                profit_class = "profit-positive" if resultado_operacao >= 0 else "profit-negative"
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-label">Resultado da Opera√ß√£o</div>
                    <div class="metric-value {profit_class}">{formatar_moeda_brl(resultado_operacao)}</div>
                </div>
                """, unsafe_allow_html=True)

            # Gr√°fico da evolu√ß√£o das cota√ß√µes
            st.markdown("## üìà Evolu√ß√£o da Cota√ß√£o USD/BRL")

            # Criar gr√°fico mostrando a evolu√ß√£o da cota√ß√£o
            fig = go.Figure()

            # Cota√ß√£o √† vista do d√≥lar (apenas ilustrativa)
            cotacao_vista = 5.00

            # Linha mostrando a evolu√ß√£o da cota√ß√£o NDF
            periodos = ['Contrata√ß√£o (D0)', 'Vencimento (1 ano)']
            cotacoes = [cotacao_contratacao, cotacao_vencimento]
            cores_linha = ['#3498db', '#27ae60' if cotacao_vencimento > cotacao_contratacao else '#e74c3c']

            fig.add_trace(go.Scatter(
                x=periodos,
                y=cotacoes,
                mode='lines+markers',
                name='Cota√ß√£o NDF (Contrato)',
                line=dict(color='#3498db', width=4),
                marker=dict(
                    color=cores_linha,
                    size=15,
                    line=dict(color='white', width=3)
                ),
                hovertemplate='<b>%{x}</b><br>Cota√ß√£o NDF: R$ %{y:.2f}<extra></extra>'
            ))

            # Linha horizontal mostrando a cota√ß√£o √† vista (apenas ilustrativa)
            fig.add_trace(go.Scatter(
                x=periodos,
                y=[cotacao_vista, cotacao_vencimento],
                mode='lines+markers',
                name='Cota√ß√£o √† Vista (Refer√™ncia)',
                line=dict(color='#95a5a6', width=2, dash='dash'),
                marker=dict(
                    color='#95a5a6',
                    size=10,
                    symbol='square',
                    line=dict(color='white', width=2)
                ),
                hovertemplate='<b>%{x}</b><br>Cota√ß√£o √† Vista: R$ %{y:.2f}<br><i>(Apenas refer√™ncia)</i><extra></extra>'
            ))

            # Adicionar √°rea sombreada para mostrar a varia√ß√£o
            fig.add_trace(go.Scatter(
                x=periodos + periodos[::-1],
                y=[min(cotacoes), min(cotacoes)] + [max(cotacoes), max(cotacoes)],
                fill='tonexty',
                fillcolor='rgba(52, 152, 219, 0.1)' if resultado_operacao >= 0 else 'rgba(231, 76, 60, 0.1)',
                line=dict(color='rgba(255,255,255,0)'),
                showlegend=False,
                hoverinfo='skip'
            ))

            fig.update_layout(
                title={
                    'text': f'Contrato NDF vs Cota√ß√£o √† Vista - {operacao} de US$ {valor_nocional_milhoes:.0f} milh√µes',
                    'x': 0.5,
                    'xanchor': 'center',
                    'font': {'size': 18}
                },
                xaxis_title="Per√≠odo",
                yaxis_title="Cota√ß√£o (R$/US$)",
                height=400,
                showlegend=True,
                hovermode='x unified',
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
            )

            fig.update_xaxes(
                showgrid=True,
                gridwidth=1,
                gridcolor='rgba(128,128,128,0.2)'
            )

            fig.update_yaxes(
                showgrid=True,
                gridwidth=1,
                gridcolor='rgba(128,128,128,0.2)',
                tickformat=',.2f'
            )

            st.plotly_chart(fig, use_container_width=True)

            # An√°lise detalhada do resultado
            st.markdown("## üéØ An√°lise Detalhada")

            col_analise1, col_analise2 = st.columns(2)

            with col_analise1:
                st.markdown("### üìä Resumo Financeiro")
                
                if resultado_operacao > 0:
                    st.success(f"‚úÖ **Opera√ß√£o Lucrativa**: A {operacao.lower()} do NDF resultou em um **ganho** de {formatar_moeda_brl(resultado_operacao)}.")
                elif resultado_operacao < 0:
                    st.error(f"‚ùå **Opera√ß√£o com Preju√≠zo**: A {operacao.lower()} do NDF resultou em uma **perda** de {formatar_moeda_brl(abs(resultado_operacao))}.")
                else:
                    st.info("‚öñÔ∏è **Opera√ß√£o Neutra**: A opera√ß√£o n√£o resultou em ganho nem perda.")
                
                st.markdown(f"""
                **Detalhes da Opera√ß√£o:**
                - **Valor Nocional**: {formatar_moeda_usd(valor_nocional_usd)}
                - **Cota√ß√£o no Mercado √† Vista**: R$5.00
                - **Cota√ß√£o na Data da Contrata√ß√£o**: {formatar_cotacao(cotacao_contratacao)}
                - **Cota√ß√£o no Vencimento**: {formatar_cotacao(cotacao_vencimento)}
                - **Varia√ß√£o**: {diferenca_cotacao:+.2f} ({variacao_percentual:+.2f}%)
                """)

            with col_analise2:
                st.markdown("### üßÆ Como foi Calculado")
                
                if operacao == "Compra":
                    st.markdown(f"""
                    **F√≥rmula para Compra de NDF:**
                    
                    `Resultado = (Cota√ß√£o Vencimento - Cota√ß√£o Contrata√ß√£o) √ó N`
                    
                    **Aplicando os valores:**
                    - Cota√ß√£o no Vencimento: {formatar_cotacao(cotacao_vencimento)}
                    - Cota√ß√£o na Data da Contrata√ß√£o: {formatar_cotacao(cotacao_contratacao)}
                    - Valor Nocional (N): {formatar_moeda_usd(valor_nocional_usd)}
                    
                    **C√°lculo:**
                    `({cotacao_vencimento:.2f} - {cotacao_contratacao:.2f}) √ó {valor_nocional_usd:,.0f}`
                    `= {diferenca_cotacao:+.2f} √ó {valor_nocional_usd:,.0f}`
                    `= {formatar_moeda_brl(resultado_operacao)}`
                    """)
                else:
                    st.markdown(f"""
                    **F√≥rmula para Venda de NDF:**
                    
                    `Resultado = (Cota√ß√£o Contrata√ß√£o - Cota√ß√£o Vencimento) √ó N`
                    
                    **Aplicando os valores:**
                    - Cota√ß√£o Contrata√ß√£o: {formatar_cotacao(cotacao_contratacao)}
                    - Cota√ß√£o Vencimento: {formatar_cotacao(cotacao_vencimento)}
                    - Valor Nocional (N): {formatar_moeda_usd(valor_nocional_usd)}
                    
                    **C√°lculo:**
                    `({cotacao_contratacao:.2f} - {cotacao_vencimento:.2f}) √ó {valor_nocional_usd:,.0f}`
                    `= {-diferenca_cotacao:+.2f} √ó {valor_nocional_usd:,.0f}`
                    `= {formatar_moeda_brl(resultado_operacao)}`
                    """)

            # Se√ß√£o educacional com f√≥rmulas
            st.markdown("## üìö F√≥rmulas e Conceitos")

            col_form1, col_form2 = st.columns(2)

            with col_form1:
                st.markdown("""
                **F√≥rmulas do NDF:**
                <div class="formula-box">
                <strong>Compra de NDF:</strong><br>
                Resultado = (Cota√ß√£o Vencimento - Cota√ß√£o Contrata√ß√£o) √ó N
                </div>
                
                <div class="formula-box">
                <strong>Venda de NDF:</strong><br>
                Resultado = (Cota√ß√£o Contrata√ß√£o - Cota√ß√£o Vencimento) √ó N
                </div>
                """, unsafe_allow_html=True)

            with col_form2:
                st.markdown("""
                **Interpreta√ß√£o dos Resultados:**
                <div class="formula-box">
                <strong>Compra:</strong> Lucra se USD subir<br>
                <strong>Venda:</strong> Lucra se USD descer<br>
                <strong>N:</strong> Valor Nocional em USD<br>
                <strong>Liquida√ß√£o:</strong> Sempre em BRL
                </div>
                """, unsafe_allow_html=True)

            # Explica√ß√£o adicional
            with st.expander("üìñ Entenda o NDF em Detalhes"):
                st.markdown("""
                **Caracter√≠sticas do NDF:**
                - **Sem entrega f√≠sica**: Apenas liquida√ß√£o financeira da diferen√ßa
                - **Prote√ß√£o cambial**: Usado para hedge de exposi√ß√£o ao d√≥lar
                - **Derivativo de balc√£o**: Negociado diretamente entre as partes
                - **Dura√ß√£o fixa**: 1 ano no nosso exemplo
                
                **Estrat√©gias:**
                - **Compra**: Prote√ß√£o contra alta do d√≥lar (importadores)
                - **Venda**: Prote√ß√£o contra queda do d√≥lar (exportadores)
                - **Especula√ß√£o**: Apostas direcionais na cota√ß√£o do USD/BRL
                
                **Riscos:**
                - **Risco de mercado**: Varia√ß√µes adversas da cota√ß√£o
                - **Risco de contraparte**: Possibilidade de inadimpl√™ncia
                - **Risco de liquidez**: Dificuldade para desfazer a posi√ß√£o
                """)

            ##########################################################################################################
            ##########################################################################################################
            
        # Instructions based on selection
        if st.session_state.selected_option == "Futuros":
            
            # CSS customizado para melhorar o visual
            st.markdown("""
            <style>
                .main > div {
                    padding-top: 2rem;
                }
                
                .stSelectbox > div > div {
                    background-color: #f8f9fa;
                }
                
                .stNumberInput > div > div {
                    background-color: #f8f9fa;
                }
                
                .metric-container {
                    background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
                    padding: 0.5rem;
                    border-radius: 10px;
                    color: white;
                    margin: 0.8rem 0;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                }
                
                .metric-value {
                    font-size: 1.3rem;
                    font-weight: bold;
                    margin: 0.3rem 0;
                }
                
                .metric-label {
                    font-size: 0.95rem;
                    opacity: 1;
                }
                
                .profit-positive {
                    color: green;
                }
                
                .profit-negative {
                    color: gold;
                }
                
                .info-box {
                    background: #e8f6ff;
                    padding: 1.5rem;
                    border-radius: 10px;
                    border-left: 4px solid #3498db;
                    margin: 1rem 0;
                }
                
                .formula-box {
                    background: #f8f9fa;
                    padding: 0.3rem;
                    border-radius: 8px;
                    border-left: 1px solid #17a2b8;
                    font-family: 'Courier New', monospace;
                    margin: 0.2rem 0;
                }
                
                .header-container {
                    text-align: center;
                    padding: 1rem 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    margin: -2rem -3rem 2rem -3rem;
                    border-radius: 0 0 20px 20px;
                    color: white;
                }
                
                .header-title {
                    font-size: 3rem;
                    font-weight: 300;
                    margin-bottom: 0.5rem;
                }
                
                .header-subtitle {
                    font-size: 1.2rem;
                    opacity: 0.9;
                }
            </style>
            """, unsafe_allow_html=True)

            # Fun√ß√µes auxiliares
            def formatar_moeda(valor):
                """Formata valor como moeda brasileira"""
                return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

            def formatar_numero(valor):
                """Formata n√∫mero com separador de milhares"""
                return f"{valor:,.0f}".replace(",", ".")

            def calcular_pu_contratacao(taxa_contratacao, prazo_vencimento):
                """Calcula o PU na contrata√ß√£o"""
                return 100000 / ((1 + taxa_contratacao) ** (prazo_vencimento / 252))

            def calcular_numero_contratos(valor_nocional, pu_contratacao):
                """Calcula n√∫mero de contratos (arredondado para baixo)"""
                return math.floor(valor_nocional / pu_contratacao)

            def calcular_pu_vencimento(pu_contratacao, taxa_efetiva):
                """Calcula PU no vencimento"""
                return pu_contratacao * (1 + taxa_efetiva)

            def calcular_resultado(operacao, pu_contratacao, pu_vencimento, numero_contratos):
                """Calcula resultado da opera√ß√£o"""
                if operacao == "Compra":
                    return (pu_vencimento - 100000) * numero_contratos
                else:
                    return (100000 - pu_vencimento) * numero_contratos

            def calcular_taxa_efetiva_anual(taxa_efetiva):
                """Taxa Efetiva Anual no Per√≠odo"""
                return ((1 + taxa_efetiva/100)**(252/prazo_vencimento)-1)*100

            # Cabe√ßalho da aplica√ß√£o
            st.markdown("""
            <div class="header-container">
                <h1 class="header-title">üìà Simulador de Contratos DI Futuro</h1>
                <p class="header-subtitle">Ferramenta educacional para entender o comportamento de contratos DI futuro</p>
            </div>
            """, unsafe_allow_html=True)

            # Caixa de informa√ß√µes
            st.markdown("""
            <div class="info-box">
                <h3>‚ÑπÔ∏è Como funciona:</h3>
                <p>O contrato DI futuro √© um derivativo que representa a expectativa sobre a taxa CDI futura. 
                Ajuste os par√¢metros abaixo e veja como eles afetam o resultado da opera√ß√£o.</p>
            </div>
            """, unsafe_allow_html=True)

            st.header("üéØ Par√¢metros da Opera√ß√£o")

            # Layout de inputs em colunas
            col1, col2 = st.columns(2)

            with col1:
                #st.subheader("üéØ Par√¢metros da Opera√ß√£o")
                
                operacao = st.selectbox(
                    "Tipo de Opera√ß√£o:",
                    ["Compra", "Venda"],
                    help="Escolha se voc√™ est√° comprando ou vendendo contratos DI futuro"
                )
                
                valor_nocional_milhoes = st.number_input(
                    "Valor Nocional (R$ milh√µes):",
                    min_value=10.0,
                    max_value=100.0,
                    value=50.0,
                    step=1.0,
                    help="Valor total da opera√ß√£o em milh√µes de reais"
                )

                prazo_vencimento = st.number_input(
                    "Prazo para Vencimento (dias √∫teis):",
                    min_value=1,
                    max_value=252,
                    value=10,
                    step=1,
                    help="N√∫mero de dias √∫teis at√© o vencimento (ano = 252 dias √∫teis)"
                )

            with col2:
                #st.subheader("üìä Taxas de Juros")
                
                taxa_contratacao = st.number_input(
                    "Taxa de Juros na Contrata√ß√£o (% a.a.):",
                    min_value=0.0,
                    max_value=50.0,
                    value=12.0,
                    step=0.01,
                    format="%.2f",
                    help="Taxa de juros anual no momento da contrata√ß√£o"
                )
                
                taxa_efetiva = st.number_input(
                    "Taxa Efetiva no Per√≠odo (%):",
                    min_value=-10.0,
                    max_value=10.0,
                    value=0.50,
                    step=0.01,
                    format="%.2f",
                    help="Taxa efetiva realizada no per√≠odo"
                )

                taxa_efetiva_anual_periodo = calcular_taxa_efetiva_anual(taxa_efetiva)
                taxa_efetiva_anual = st.number_input(
                    "Taxa Efetiva Anual no Per√≠odo (%):",
                    value=taxa_efetiva_anual_periodo,
                    format="%.2f",
                    help="Taxa efetiva anual realizada no per√≠odo"
                )

            #    taxa_efetiva_anual_periodo 
                


            # Realizar c√°lculos
            valor_nocional = valor_nocional_milhoes * 1000000
            taxa_contratacao_decimal = taxa_contratacao / 100
            taxa_efetiva_decimal = taxa_efetiva / 100

            pu_contratacao = calcular_pu_contratacao(taxa_contratacao_decimal, prazo_vencimento)
            numero_contratos = calcular_numero_contratos(valor_nocional, pu_contratacao)
            pu_vencimento = calcular_pu_vencimento(pu_contratacao, taxa_efetiva_decimal)
            resultado_operacao = calcular_resultado(operacao, pu_contratacao, pu_vencimento, numero_contratos)

            # Exibir resultados em cart√µes coloridos
            st.markdown("## üìä Resultados da Opera√ß√£o")

            # Layout dos resultados em colunas
            res_col1, res_col2, res_col3, res_col4 = st.columns(4)

            with res_col1:
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-label">PU na Contrata√ß√£o</div>
                    <div class="metric-value">{formatar_moeda(pu_contratacao)}</div>
                </div>
                """, unsafe_allow_html=True)

            with res_col2:
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-label">N√∫mero de Contratos</div>
                    <div class="metric-value">{formatar_numero(numero_contratos)}</div>
                </div>
                """, unsafe_allow_html=True)

            with res_col3:
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-label">PU no Vencimento</div>
                    <div class="metric-value">{formatar_moeda(pu_vencimento)}</div>
                </div>
                """, unsafe_allow_html=True)

            with res_col4:
                profit_class = "profit-positive" if resultado_operacao >= 0 else "profit-negative"
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-label">Resultado da Opera√ß√£o</div>
                    <div class="metric-value {profit_class}">{formatar_moeda(resultado_operacao)}</div>
                </div>
                """, unsafe_allow_html=True)

            # Gr√°fico da evolu√ß√£o do PU
            st.markdown("## üìà Evolu√ß√£o do Pre√ßo Unit√°rio (PU)")

            # Criar gr√°fico com Plotly - Duas linhas distintas
            fig = go.Figure()

            # Linha horizontal: D0 at√© o prazo (base do ret√¢ngulo)
            fig.add_trace(go.Scatter(
                x=['D0', f'{prazo_vencimento} DU', 'Vcto'],
                y=[pu_contratacao, pu_contratacao, pu_contratacao],
                mode='lines',
                line=dict(color="#000406", width=2),
                showlegend=False,
                hoverinfo='skip'
            ))

            # Linha vertical esquerda: PU contrata√ß√£o
            fig.add_trace(go.Scatter(
                x=['D0', 'Vcto'],
                y=[pu_contratacao, 100000],
                mode='lines+markers',
                name=f'PU = {formatar_moeda(pu_contratacao)}',
                line=dict(color='#3498db', width=2),
                marker=dict(color='#3498db', size=8),
                hovertemplate='<b>D0</b><br>PU: %{y:,.2f}<extra></extra>'
            ))

            # Linha vertical direita: PU vencimento
            fig.add_trace(go.Scatter(
                x=['D0', 'Vcto'],
                y=[pu_contratacao, pu_vencimento],
                mode='lines+markers',
                name=f'PU = {formatar_moeda(pu_vencimento)}',
                line=dict(color='#e74c3c' if pu_vencimento < 100000 else '#27ae60', width=3),
                marker=dict(color='#e74c3c' if pu_vencimento < 100000 else '#27ae60', size=8),
                hovertemplate='<b>%{x}</b><br>PU: %{y:,.2f}<extra></extra>'
            ))

            # Linha pontilhada mostrando valor te√≥rico de 100.000
            fig.add_trace(go.Scatter(
                x=['D0', f'{prazo_vencimento} DU', 'Vcto'],
                y=[100000, 100000, 100000],
                mode='lines',
                name='PU = R$ 100.000 (Te√≥rico)',
                line=dict(color='gray', width=1, dash='dot'),
                hovertemplate='<b>Valor Te√≥rico</b><br>PU: R$ 100.000,00<extra></extra>'
            ))

            fig.update_layout(
                title={
                    'text': f'Comportamento do PU - {operacao} de Contratos DI',
                    'x': 0.5,
                    'xanchor': 'center',
                    'font': {'size': 16}
                },
                xaxis_title="Per√≠odo",
                yaxis_title="Pre√ßo Unit√°rio (R$)",
                height=400,
                showlegend=True,
                hovermode='closest',
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
            )

            fig.update_xaxes(
                showgrid=True,
                gridwidth=1,
                gridcolor='rgba(128,128,128,0.2)'
            )

            fig.update_yaxes(
                showgrid=True,
                gridwidth=1,
                gridcolor='rgba(128,128,128,0.2)',
                tickformat=',.2f'
            )

            st.plotly_chart(fig, use_container_width=True)

            # An√°lise do resultado
            st.markdown("## üéØ An√°lise do Resultado")

            diferenca_pu = pu_vencimento - 100000
            percentual_variacao = (diferenca_pu / 100000) * 100

            col_analise1, col_analise2 = st.columns(2)

            with col_analise1:
                if resultado_operacao > 0:
                    st.success(f"‚úÖ **Opera√ß√£o Lucrativa**: A {operacao.lower()} de contratos DI futuro resultou em um ganho de **{formatar_moeda(resultado_operacao)}**.")
                elif resultado_operacao < 0:
                    st.error(f"‚ùå **Opera√ß√£o com Preju√≠zo**: A {operacao.lower()} de contratos DI futuro resultou em uma perda de **{formatar_moeda(abs(resultado_operacao))}**.")
                else:
                    st.info("‚öñÔ∏è **Opera√ß√£o Neutra**: A opera√ß√£o n√£o resultou em ganho nem perda.")

            with col_analise2:
                st.info(f"""
                **Varia√ß√£o do PU:**
                - Diferen√ßa: {formatar_moeda(diferenca_pu)}
                - Percentual: {percentual_variacao:+.3f}%
                - Contratos: {formatar_numero(numero_contratos)}
                """)

            # Explica√ß√£o das linhas do gr√°fico
            st.markdown("""
            **Interpreta√ß√£o do Gr√°fico:**
            - üîµ **Linha Azul Pontilhada**: Mostra o desconto aplicado pela taxa de juros contratada (de R$ 100.000 para o PU na contrata√ß√£o)
            - üü¢/üî¥ **Linha Cont√≠nua**: Mostra a realiza√ß√£o efetiva (do PU contratado ao PU no vencimento)
            - A **diferen√ßa entre as linhas** representa o ganho/perda da opera√ß√£o
            """)

            # Se√ß√£o educacional com f√≥rmulas
            st.markdown("## üìö F√≥rmulas Matem√°ticas")

            col_form1, col_form2 = st.columns(2)

            with col_form1:
                st.markdown("""
                **C√°lculo do PU na Contrata√ß√£o:**
                <div class="formula-box">PU = 100.000 / (1 + R)^(t/252)</div>
                
                **N√∫mero de Contratos:**
                <div class="formula-box">N = floor(Valor Nocional / PU)</div>
                """, unsafe_allow_html=True)

            with col_form2:
                st.markdown("""
                **PU no Vencimento:**
                <div class="formula-box">PU_vcto = PU √ó (1 + R')</div>
                
                **Resultado da Opera√ß√£o:**
                <div class="formula-box">
                Compra: (PU_vcto - 100000) √ó N<br>
                Venda: (100000 - PU_vcto) √ó N
                </div>
                """, unsafe_allow_html=True)

            # Explica√ß√£o adicional
            with st.expander("üìñ Entenda os Conceitos"):
                st.markdown("""
                **Vari√°veis:**
                - **R**: Taxa de juros de mercado na contrata√ß√£o (% a.a.)
                - **t**: Prazo para vencimento em dias √∫teis
                - **R'**: Taxa de juros efetiva no per√≠odo (%)
                - **PU**: Pre√ßo Unit√°rio do contrato
                - **N**: N√∫mero de contratos negociados
                
                **Como Interpretar:**
                - **Compra**: Voc√™ lucra se a taxa efetiva for menor que a esperada (PU sobe)
                - **Venda**: Voc√™ lucra se a taxa efetiva for maior que a esperada (PU desce)
                - O resultado √© proporcional ao n√∫mero de contratos e √† diferen√ßa entre o PU no vencimento e R$100.000
                """)

        # Instructions based on selection
        if st.session_state.selected_option == "Options":

            # Custom CSS for better styling
            st.markdown("""
                <style>
                .main {
                    padding: 2rem;
                }
                .stTabs [data-baseweb="tab-list"] {
                    gap: 2rem;
                }
                .stTabs [data-baseweb="tab"] {
                    height: 50px;
                    white-space: pre-wrap;
                    border-radius: 4px 4px 0px 0px;
                    padding: 10px 16px;
                    font-weight: 600;
                }
                h1, h2, h3 {
                    padding-top: 1rem;
                }
                .highlight {
                    background-color: #f0f2f6;
                    padding: 1.5rem;
                    border-radius: 0.5rem;
                }
                .small-text {
                    font-size: 0.8rem;
                }
                </style>
            """, unsafe_allow_html=True)

            # Function to calculate option price using Black-Scholes model
            def black_scholes(S, K, T, r, sigma, option_type):
                """
                Calculate option price using Black-Scholes model
                
                Parameters:
                S: Current stock price
                K: Strike price
                T: Time to maturity (in years)
                r: Risk-free interest rate (annual)
                sigma: Volatility
                option_type: 'call' or 'put'
                
                Returns:
                option_price: Price of the option
                """
                d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
                d2 = d1 - sigma * np.sqrt(T)
                
                if option_type == 'call':
                    option_price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
                else:  # put
                    option_price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)
                
                return option_price

            # Function to calculate option payoff at expiration
            def option_payoff(S_T, K, option_type, position):
                """
                Calculate option payoff at expiration
                
                Parameters:
                S_T: Stock price at expiration
                K: Strike price
                option_type: 'call' or 'put'
                position: 'buy' or 'sell'
                
                Returns:
                payoff: Payoff at expiration
                """
                if option_type == 'call':
                    payoff = max(0, S_T - K)
                else:  # put
                    payoff = max(0, K - S_T)
                
                if position == 'sell':
                    payoff = -payoff
                
                return payoff

            # Function to calculate option profit at expiration
            def option_profit(S_T, K, premium, option_type, position):
                """
                Calculate option profit at expiration
                
                Parameters:
                S_T: Stock price at expiration
                K: Strike price
                premium: Option premium
                option_type: 'call' or 'put'
                position: 'buy' or 'sell'
                
                Returns:
                profit: Profit at expiration
                """
                payoff = option_payoff(S_T, K, option_type, position)
                
                if position == 'buy':
                    profit = payoff - premium
                else:  # sell
                    profit = premium + payoff
                
                return profit

            # Function to calculate break-even point
            def break_even_point(K, premium, option_type, position):
                """
                Calculate break-even point
                
                Parameters:
                K: Strike price
                premium: Option premium
                option_type: 'call' or 'put'
                position: 'buy' or 'sell'
                
                Returns:
                break_even: Break-even point
                """
                if position == 'buy':
                    if option_type == 'call':
                        return K + premium
                    else:  # put
                        return K - premium
                else:  # sell
                    if option_type == 'call':
                        return K + premium
                    else:  # put
                        return K - premium


            # Create tabs for different sections of the app
            tabs = st.tabs(["Introduction", "Option Simulator", "Option Strategies", "Educational Resources"])

            # Introduction Tab
            with tabs[0]:
                st.title("Options Teaching Tool")
                st.markdown("### Welcome to the Interactive Options Teaching Tool!")
                
                st.markdown("""
                This tool is designed to help you understand and visualize option strategies, including:
                
                - **American vs European Options**: Understand the differences between these two option styles
                - **Calls vs Puts**: Learn how these option types work
                - **Buying vs Selling**: Visualize the payoff and profit for different positions
                
                Use the simulator tab to interact with different option parameters and see how they affect option pricing and profitability.
                """)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### European vs American Options")
                    st.markdown("""
                    - **European Options**: Can only be exercised at expiration
                    - **American Options**: Can be exercised any time before expiration
                    
                    This simulator focuses primarily on European options for simplicity in teaching the core concepts.
                    """)
                
                with col2:
                    st.markdown("### Calls vs Puts")
                    st.markdown("""
                    - **Call Option**: Gives the buyer the right (but not obligation) to buy the underlying asset at the strike price
                    - **Put Option**: Gives the buyer the right (but not obligation) to sell the underlying asset at the strike price
                    """)
                
                st.markdown("### Buying vs Selling")
                st.markdown("""
                - **Buying Options (Long Position)**: 
                - Limited risk (premium paid)
                - Unlimited potential profit (for calls)
                - Limited potential profit (for puts)
                
                - **Selling Options (Short Position)**:
                - Limited potential profit (premium received)
                - Unlimited potential loss (for calls)
                - Limited potential loss (for puts)
                """)
                
                st.markdown("### How to Use This Tool")
                st.markdown("""
                1. Go to the Option Simulator tab
                2. Select your option parameters
                3. View the payoff and profit diagrams
                4. Adjust parameters to see how they affect option valuation
                
                The tool will also provide educational explanations based on your selections.
                """)

            # Option Simulator Tab
            with tabs[1]:
                st.title("Option Simulator")
                
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    st.markdown("### Option Parameters")
                    
                    # Option Type Selection
                    option_style = st.radio("Option Style", ["European", "American"], index=0, help="European options can only be exercised at expiration. American options can be exercised any time before expiration.")
                    
                    position = st.radio("Position", ["Buy", "Sell"], index=0, help="Buy (long) or Sell (short) the option")
                    
                    option_type = st.radio("Option Type", ["Call", "Put"], index=0, help="Call gives right to buy. Put gives right to sell.")
                    
                    # Market and Contract Parameters
                    st.markdown("### Market Parameters")
                    
                    S = st.slider("Current Price of Underlying Asset (S)", min_value=10.0, max_value=200.0, value=100.0, step=1.0, help="Current market price of the underlying asset")
                    
                    K = st.slider("Strike Price (K)", min_value=10.0, max_value=200.0, value=100.0, step=1.0, help="The price at which the option can be exercised")
                    
                    T = st.slider("Time to Maturity (years)", min_value=0.1, max_value=2.0, value=1.0, step=0.1, help="Time until the option expires (in years)")
                    
                    sigma = st.slider("Volatility (œÉ, %)", min_value=5.0, max_value=100.0, value=20.0, step=5.0, help="Annualized volatility of the underlying asset") / 100
                    
                    r = st.slider("Risk-Free Interest Rate (r, %)", min_value=0.0, max_value=10.0, value=2.0, step=0.5, help="Annual risk-free interest rate") / 100
                    
                    # Calculate option premium
                    premium = black_scholes(S, K, T, r, sigma, option_type.lower())
                    
                    st.markdown("### Option Premium")
                    st.markdown(f"#### ${premium:.2f}")
                    
                    if option_style == "American" and option_type == "Put" and K > S:
                        st.warning("Note: For American put options when strike price > current price, early exercise might be optimal. The Black-Scholes model may underestimate the premium.")
                
                with col2:
                    st.markdown("### Payoff and Profit Diagrams")
                    
                    # Generate price range for x-axis
                    range_percent = 0.5
                    price_min = max(1, K * (1 - range_percent))
                    price_max = K * (1 + range_percent)
                    
                    # Create price array
                    prices = np.linspace(price_min, price_max, 100)
                    
                    # Calculate payoffs and profits
                    payoffs = [option_payoff(price, K, option_type.lower(), position.lower()) for price in prices]
                    profits = [option_profit(price, K, premium, option_type.lower(), position.lower()) for price in prices]
                    
                    # Calculate break-even point
                    be_point = break_even_point(K, premium, option_type.lower(), position.lower())
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Payoff': payoffs,
                        'Profit': profits
                    })
                    
                    # Create payoff diagram using Plotly
                    fig1 = go.Figure()
                    
                    fig1.add_trace(go.Scatter(
                        x=prices,
                        y=payoffs,
                        mode='lines',
                        name='Payoff',
                        line=dict(color='blue', width=2)
                    ))
                    
                    fig1.add_trace(go.Scatter(
                        x=[K],
                        y=[0],
                        mode='markers',
                        name='Strike Price',
                        marker=dict(color='red', size=10)
                    ))
                    
                    fig1.update_layout(
                        title=f"Payoff Diagram: {position} {option_type} Option",
                        xaxis_title="Underlying Price at Expiration",
                        yaxis_title="Payoff",
                        height=400,
                        hovermode="x unified"
                    )
                    
                    fig1.add_shape(
                        type="line",
                        x0=price_min,
                        y0=0,
                        x1=price_max,
                        y1=0,
                        line=dict(color="black", width=1, dash="dash")
                    )
                    
                    # Create profit diagram using Plotly
                    fig2 = go.Figure()
                    
                    fig2.add_trace(go.Scatter(
                        x=prices,
                        y=profits,
                        mode='lines',
                        name='Profit',
                        line=dict(color='green', width=2)
                    ))
                    
                    fig2.add_trace(go.Scatter(
                        x=[K],
                        y=[option_profit(K, K, premium, option_type.lower(), position.lower())],
                        mode='markers',
                        name='Strike Price',
                        marker=dict(color='red', size=10)
                    ))
                    
                    fig2.add_trace(go.Scatter(
                        x=[be_point],
                        y=[0],
                        mode='markers',
                        name='Break-Even Point',
                        marker=dict(color='purple', size=10)
                    ))
                    
                    fig2.update_layout(
                        title=f"Profit Diagram: {position} {option_type} Option",
                        xaxis_title="Underlying Price at Expiration",
                        yaxis_title="Profit",
                        height=400,
                        hovermode="x unified"
                    )
                    
                    fig2.add_shape(
                        type="line",
                        x0=price_min,
                        y0=0,
                        x1=price_max,
                        y1=0,
                        line=dict(color="black", width=1, dash="dash")
                    )
                    
                    # Display charts
                    st.plotly_chart(fig1, use_container_width=True)
                    st.plotly_chart(fig2, use_container_width=True)
                    
                # Display explanation
                st.markdown("### Explanation")
                
                st.markdown(f"""
                #### {position} {option_type} Option Explanation
                
                - **Premium**: ${premium:.2f}
                - **Break-Even Point**: ${be_point:.2f}
                """)
                
                if option_type == "Call":
                    if position == "Buy":
                        st.markdown("""
                        **Strategy Explanation:**
                        - You're paying a premium for the right to buy the underlying at the strike price
                        - Profit when the underlying price rises above the strike price plus premium
                        - Maximum risk is limited to the premium paid
                        - Maximum profit is theoretically unlimited (as the stock price can rise indefinitely)
                        """)
                    else:  # Sell
                        st.markdown("""
                        **Strategy Explanation:**
                        - You're receiving a premium for the obligation to sell the underlying at the strike price
                        - Profit when the underlying price stays below the strike price plus premium
                        - Maximum profit is limited to the premium received
                        - Maximum risk is theoretically unlimited (as the stock price can rise indefinitely)
                        """)
                else:  # Put
                    if position == "Buy":
                        st.markdown("""
                        **Strategy Explanation:**
                        - You're paying a premium for the right to sell the underlying at the strike price
                        - Profit when the underlying price falls below the strike price minus premium
                        - Maximum risk is limited to the premium paid
                        - Maximum profit is limited (as the stock price can only fall to zero)
                        """)
                    else:  # Sell
                        st.markdown("""
                        **Strategy Explanation:**
                        - You're receiving a premium for the obligation to buy the underlying at the strike price
                        - Profit when the underlying price stays above the strike price minus premium
                        - Maximum profit is limited to the premium received
                        - Maximum risk is limited (as the stock price can only fall to zero)
                        """)
                
                # Option Greeks Calculation
                st.markdown("### Option Greeks")
                
                # Calculate d1 and d2 for Greeks
                d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
                d2 = d1 - sigma * np.sqrt(T)
                
                # Calculate Delta
                if option_type == "Call":
                    delta = norm.cdf(d1)
                else:  # Put
                    delta = norm.cdf(d1) - 1
                
                # Calculate Gamma
                gamma = norm.pdf(d1) / (S * sigma * np.sqrt(T))
                
                # Calculate Theta (time decay)
                if option_type == "Call":
                    theta = -S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) - r * K * np.exp(-r * T) * norm.cdf(d2)
                else:  # Put
                    theta = -S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) + r * K * np.exp(-r * T) * norm.cdf(-d2)
                theta = theta / 365  # convert to daily
                
                # Calculate Vega
                vega = S * np.sqrt(T) * norm.pdf(d1) * 0.01  # for 1% change in volatility
                
                if position == "Sell":
                    delta = -delta
                    gamma = -gamma
                    theta = -theta
                    vega = -vega
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Delta", f"{delta:.4f}")
                    st.caption("Change in option price for a $1 change in underlying")
                
                with col2:
                    st.metric("Gamma", f"{gamma:.4f}")
                    st.caption("Rate of change of Delta for a $1 change in underlying")
                
                with col3:
                    st.metric("Theta", f"{theta:.4f}")
                    st.caption("Daily time decay (change in option price as time passes)")
                
                with col4:
                    st.metric("Vega", f"{vega:.4f}")
                    st.caption("Change in option price for a 1% change in volatility")


            # Option Strategies Tab
            with tabs[2]:
                st.title("Option Strategies")
                
                st.markdown("""
                ### Explore Option Strategies Based on Market Outlook
                
                Option strategies can be tailored to different market expectations. Select your market outlook and 
                explore suitable strategies for that scenario.
                """)
                
                # Market outlook selection
                market_outlook = st.selectbox(
                    "Select Your Market Outlook",
                    [
                        "Bullish (Expecting prices to rise significantly)",
                        "Slightly Bullish (Expecting moderate upward movement)",
                        "Bearish (Expecting prices to fall significantly)",
                        "Slightly Bearish (Expecting moderate downward movement)",
                        "Neutral (Expecting prices to stay in a range)",
                        "Volatile (Expecting large price movements in either direction)",
                        "Low Volatility (Expecting minimal price movement)"
                    ]
                )
                
                # Dictionary mapping market outlooks to suitable strategies
                strategy_map = {
                    "Bullish (Expecting prices to rise significantly)": [
                        "Long Call", 
                        "Bull Call Spread",
                        "Risk Reversal (Buy Call, Sell Put)"
                    ],
                    "Slightly Bullish (Expecting moderate upward movement)": [
                        "Covered Call", 
                        "Bull Put Spread",
                        "Long Call Vertical Spread"
                    ],
                    "Bearish (Expecting prices to fall significantly)": [
                        "Long Put", 
                        "Bear Put Spread",
                        "Risk Reversal (Buy Put, Sell Call)"
                    ],
                    "Slightly Bearish (Expecting moderate downward movement)": [
                        "Bear Call Spread", 
                        "Covered Put",
                        "Short Call"
                    ],
                    "Neutral (Expecting prices to stay in a range)": [
                        "Iron Condor", 
                        "Short Straddle",
                        "Short Strangle",
                        "Butterfly Spread"
                    ],
                    "Volatile (Expecting large price movements in either direction)": [
                        "Long Straddle", 
                        "Long Strangle",
                        "Long Guts"
                    ],
                    "Low Volatility (Expecting minimal price movement)": [
                        "Iron Butterfly", 
                        "Short Straddle",
                        "Calendar Spread"
                    ]
                }
                
                # Strategy selection based on market outlook
                strategy_options = strategy_map[market_outlook]
                selected_strategy = st.selectbox("Select a Strategy", strategy_options)
                
                # Parameters for all strategies
                st.markdown("### Strategy Parameters")
                col1, col2 = st.columns(2)
                
                with col1:
                    S = st.slider("Current Price of Underlying Asset (S)", min_value=10.0, max_value=200.0, value=100.0, step=1.0, key="strat_S")
                    sigma = st.slider("Volatility (œÉ, %)", min_value=5.0, max_value=100.0, value=20.0, step=5.0, key="strat_sigma") / 100
                
                with col2:
                    T = st.slider("Time to Maturity (years)", min_value=0.1, max_value=2.0, value=1.0, step=0.1, key="strat_T")
                    r = st.slider("Risk-Free Interest Rate (r, %)", min_value=0.0, max_value=10.0, value=2.0, step=0.5, key="strat_r") / 100
                
                # Strategy-specific parameters and functions
                if "Long Call" in selected_strategy:
                    K_call = st.slider("Call Strike Price", min_value=50.0, max_value=150.0, value=100.0, step=5.0, key="K_call")
                    call_premium = black_scholes(S, K_call, T, r, sigma, "call")
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Long Call Strategy
                    
                    **Description:** Purchase a call option, giving you the right to buy the underlying at the strike price.
                    
                    **Parameters:**
                    - Call Strike Price: ${K_call:.2f}
                    - Call Premium: ${call_premium:.2f}
                    
                    **Maximum Risk:** Limited to premium paid (${call_premium:.2f})
                    
                    **Maximum Reward:** Unlimited (as the underlying price rises)
                    
                    **Breakeven Point:** Strike Price + Premium = ${K_call + call_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, K_call * 0.5), K_call * 1.5, 100)
                    
                    # Calculate payoffs and profits
                    payoffs = [max(0, price - K_call) for price in prices]
                    profits = [max(0, price - K_call) - call_premium for price in prices]
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Payoff': payoffs,
                        'Profit': profits
                    })
                    
                elif "Long Put" in selected_strategy:
                    K_put = st.slider("Put Strike Price", min_value=50.0, max_value=150.0, value=100.0, step=5.0, key="K_put")
                    put_premium = black_scholes(S, K_put, T, r, sigma, "put")
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Long Put Strategy
                    
                    **Description:** Purchase a put option, giving you the right to sell the underlying at the strike price.
                    
                    **Parameters:**
                    - Put Strike Price: ${K_put:.2f}
                    - Put Premium: ${put_premium:.2f}
                    
                    **Maximum Risk:** Limited to premium paid (${put_premium:.2f})
                    
                    **Maximum Reward:** Limited but substantial (Strike Price - Premium = ${K_put - put_premium:.2f})
                    
                    **Breakeven Point:** Strike Price - Premium = ${K_put - put_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, K_put * 0.5), K_put * 1.5, 100)
                    
                    # Calculate payoffs and profits
                    payoffs = [max(0, K_put - price) for price in prices]
                    profits = [max(0, K_put - price) - put_premium for price in prices]
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Payoff': payoffs,
                        'Profit': profits
                    })
                    
                elif "Short Call" in selected_strategy:
                    K_call = st.slider("Call Strike Price", min_value=50.0, max_value=150.0, value=100.0, step=5.0, key="K_call")
                    call_premium = black_scholes(S, K_call, T, r, sigma, "call")
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Short Call Strategy
                    
                    **Description:** Sell a call option, obligating you to sell the underlying at the strike price if the option is exercised.
                    
                    **Parameters:**
                    - Call Strike Price: ${K_call:.2f}
                    - Call Premium Received: ${call_premium:.2f}
                    
                    **Maximum Risk:** Unlimited (as the underlying price rises)
                    
                    **Maximum Reward:** Limited to premium received (${call_premium:.2f})
                    
                    **Breakeven Point:** Strike Price + Premium = ${K_call + call_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, K_call * 0.5), K_call * 1.5, 100)
                    
                    # Calculate payoffs and profits
                    payoffs = [-max(0, price - K_call) for price in prices]
                    profits = [call_premium - max(0, price - K_call) for price in prices]
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Payoff': payoffs,
                        'Profit': profits
                    })
                    
                elif "Short Put" in selected_strategy:
                    K_put = st.slider("Put Strike Price", min_value=50.0, max_value=150.0, value=100.0, step=5.0, key="K_put")
                    put_premium = black_scholes(S, K_put, T, r, sigma, "put")
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Short Put Strategy
                    
                    **Description:** Sell a put option, obligating you to buy the underlying at the strike price if the option is exercised.
                    
                    **Parameters:**
                    - Put Strike Price: ${K_put:.2f}
                    - Put Premium Received: ${put_premium:.2f}
                    
                    **Maximum Risk:** Limited but substantial (Strike Price - Premium = ${K_put - put_premium:.2f})
                    
                    **Maximum Reward:** Limited to premium received (${put_premium:.2f})
                    
                    **Breakeven Point:** Strike Price - Premium = ${K_put - put_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, K_put * 0.5), K_put * 1.5, 100)
                    
                    # Calculate payoffs and profits
                    payoffs = [-max(0, K_put - price) for price in prices]
                    profits = [put_premium - max(0, K_put - price) for price in prices]
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Payoff': payoffs,
                        'Profit': profits
                    })
                    
                elif "Covered Call" in selected_strategy:
                    K_call = st.slider("Call Strike Price", min_value=50.0, max_value=150.0, value=110.0, step=5.0, key="K_call")
                    call_premium = black_scholes(S, K_call, T, r, sigma, "call")
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Covered Call Strategy
                    
                    **Description:** Own the underlying asset and sell a call option against it.
                    
                    **Parameters:**
                    - Current Stock Price: ${S:.2f}
                    - Call Strike Price: ${K_call:.2f}
                    - Call Premium Received: ${call_premium:.2f}
                    
                    **Maximum Risk:** Substantial (Stock Price - Premium = ${S - call_premium:.2f}) if the stock price falls to zero
                    
                    **Maximum Reward:** Limited (Call Premium + (Strike - Stock Price) = ${call_premium + (K_call - S):.2f})
                    
                    **Breakeven Point:** Stock Price - Premium = ${S - call_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, S * 0.5), S * 1.5, 100)
                    
                    # Calculate profits
                    profits = []
                    for price in prices:
                        # Stock component: price change
                        stock_profit = price - S
                        # Short call component
                        call_profit = call_premium - max(0, price - K_call)
                        # Total profit
                        total_profit = stock_profit + call_profit
                        profits.append(total_profit)
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Profit': profits
                    })
                    
                elif "Protective Put" in selected_strategy:
                    K_put = st.slider("Put Strike Price", min_value=50.0, max_value=150.0, value=90.0, step=5.0, key="K_put")
                    put_premium = black_scholes(S, K_put, T, r, sigma, "put")
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Protective Put Strategy
                    
                    **Description:** Own the underlying asset and buy a put option as insurance.
                    
                    **Parameters:**
                    - Current Stock Price: ${S:.2f}
                    - Put Strike Price: ${K_put:.2f}
                    - Put Premium Paid: ${put_premium:.2f}
                    
                    **Maximum Risk:** Limited to (Stock Price - Strike Price + Premium = ${S - K_put + put_premium:.2f}) if price drops below strike
                    
                    **Maximum Reward:** Unlimited upside (minus the put premium)
                    
                    **Breakeven Point:** Stock Price + Premium = ${S + put_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, S * 0.5), S * 1.5, 100)
                    
                    # Calculate profits
                    profits = []
                    for price in prices:
                        # Stock component: price change
                        stock_profit = price - S
                        # Long put component
                        put_profit = max(0, K_put - price) - put_premium
                        # Total profit
                        total_profit = stock_profit + put_profit
                        profits.append(total_profit)
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Profit': profits
                    })
                    
                elif "Bull Call Spread" in selected_strategy:
                    K_long = st.slider("Long Call Strike Price", min_value=50.0, max_value=150.0, value=95.0, step=5.0, key="K_long")
                    K_short = st.slider("Short Call Strike Price", min_value=K_long, max_value=150.0, value=110.0, step=5.0, key="K_short")
                    
                    # Calculate premiums
                    long_premium = black_scholes(S, K_long, T, r, sigma, "call")
                    short_premium = black_scholes(S, K_short, T, r, sigma, "call")
                    net_premium = long_premium - short_premium
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Bull Call Spread Strategy
                    
                    **Description:** Buy a call option at a lower strike price and sell a call at a higher strike price.
                    
                    **Parameters:**
                    - Long Call Strike Price: ${K_long:.2f} (Premium: ${long_premium:.2f})
                    - Short Call Strike Price: ${K_short:.2f} (Premium: ${short_premium:.2f})
                    - Net Premium Paid: ${net_premium:.2f}
                    
                    **Maximum Risk:** Limited to net premium paid (${net_premium:.2f})
                    
                    **Maximum Reward:** Limited to difference between strikes minus net premium (${K_short - K_long - net_premium:.2f})
                    
                    **Breakeven Point:** Lower Strike + Net Premium = ${K_long + net_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, K_long * 0.8), K_short * 1.2, 100)
                    
                    # Calculate profits
                    profits = []
                    for price in prices:
                        # Long call profit
                        long_profit = max(0, price - K_long) - long_premium
                        # Short call profit
                        short_profit = short_premium - max(0, price - K_short)
                        # Total profit
                        total_profit = long_profit + short_profit
                        profits.append(total_profit)
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Profit': profits
                    })
                    
                elif "Bear Put Spread" in selected_strategy:
                    K_long = st.slider("Long Put Strike Price", min_value=50.0, max_value=150.0, value=110.0, step=5.0, key="K_long")
                    K_short = st.slider("Short Put Strike Price", min_value=50.0, max_value=K_long, value=95.0, step=5.0, key="K_short")
                    
                    # Calculate premiums
                    long_premium = black_scholes(S, K_long, T, r, sigma, "put")
                    short_premium = black_scholes(S, K_short, T, r, sigma, "put")
                    net_premium = long_premium - short_premium
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Bear Put Spread Strategy
                    
                    **Description:** Buy a put option at a higher strike price and sell a put at a lower strike price.
                    
                    **Parameters:**
                    - Long Put Strike Price: ${K_long:.2f} (Premium: ${long_premium:.2f})
                    - Short Put Strike Price: ${K_short:.2f} (Premium: ${short_premium:.2f})
                    - Net Premium Paid: ${net_premium:.2f}
                    
                    **Maximum Risk:** Limited to net premium paid (${net_premium:.2f})
                    
                    **Maximum Reward:** Limited to difference between strikes minus net premium (${K_long - K_short - net_premium:.2f})
                    
                    **Breakeven Point:** Higher Strike - Net Premium = ${K_long - net_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, K_short * 0.8), K_long * 1.2, 100)
                    
                    # Calculate profits
                    profits = []
                    for price in prices:
                        # Long put profit
                        long_profit = max(0, K_long - price) - long_premium
                        # Short put profit
                        short_profit = short_premium - max(0, K_short - price)
                        # Total profit
                        total_profit = long_profit + short_profit
                        profits.append(total_profit)
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Profit': profits
                    })
                    
                elif "Long Straddle" in selected_strategy:
                    K = st.slider("Strike Price", min_value=50.0, max_value=150.0, value=100.0, step=5.0, key="K_straddle")
                    
                    # Calculate premiums
                    call_premium = black_scholes(S, K, T, r, sigma, "call")
                    put_premium = black_scholes(S, K, T, r, sigma, "put")
                    total_premium = call_premium + put_premium
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Long Straddle Strategy
                    
                    **Description:** Buy both a call and a put at the same strike price, profiting from large price movements in either direction.
                    
                    **Parameters:**
                    - Strike Price: ${K:.2f}
                    - Call Premium: ${call_premium:.2f}
                    - Put Premium: ${put_premium:.2f}
                    - Total Premium: ${total_premium:.2f}
                    
                    **Maximum Risk:** Limited to total premium paid (${total_premium:.2f})
                    
                    **Maximum Reward:** Unlimited (as price moves far from strike in either direction)
                    
                    **Breakeven Points:** 
                    - Upside: Strike + Total Premium = ${K + total_premium:.2f}
                    - Downside: Strike - Total Premium = ${K - total_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, K * 0.5), K * 1.5, 100)
                    
                    # Calculate profits
                    profits = []
                    for price in prices:
                        # Call profit
                        call_profit = max(0, price - K) - call_premium
                        # Put profit
                        put_profit = max(0, K - price) - put_premium
                        # Total profit
                        total_profit = call_profit + put_profit
                        profits.append(total_profit)
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Profit': profits
                    })
                    
                elif "Iron Condor" in selected_strategy:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        K_put_long = st.slider("Long Put Strike", min_value=50.0, max_value=90.0, value=80.0, step=5.0, key="K_put_long")
                        K_put_short = st.slider("Short Put Strike", min_value=K_put_long, max_value=100.0, value=90.0, step=5.0, key="K_put_short")
                    
                    with col2:
                        K_call_short = st.slider("Short Call Strike", min_value=K_put_short, max_value=150.0, value=110.0, step=5.0, key="K_call_short")
                        K_call_long = st.slider("Long Call Strike", min_value=K_call_short, max_value=150.0, value=120.0, step=5.0, key="K_call_long")
                    
                    # Calculate premiums
                    put_long_premium = black_scholes(S, K_put_long, T, r, sigma, "put")
                    put_short_premium = black_scholes(S, K_put_short, T, r, sigma, "put")
                    call_short_premium = black_scholes(S, K_call_short, T, r, sigma, "call")
                    call_long_premium = black_scholes(S, K_call_long, T, r, sigma, "call")
                    
                    net_premium = put_short_premium + call_short_premium - put_long_premium - call_long_premium
                    max_profit = net_premium
                    max_risk = (K_put_short - K_put_long) - net_premium
                    
                    # Display strategy information
                    st.markdown(f"""
                    ### Iron Condor Strategy
                    
                    **Description:** A market-neutral strategy that profits when the underlying price stays within a range.
                    
                    **Parameters:**
                    - Long Put Strike: ${K_put_long:.2f} (Premium: ${put_long_premium:.2f})
                    - Short Put Strike: ${K_put_short:.2f} (Premium: ${put_short_premium:.2f})
                    - Short Call Strike: ${K_call_short:.2f} (Premium: ${call_short_premium:.2f})
                    - Long Call Strike: ${K_call_long:.2f} (Premium: ${call_long_premium:.2f})
                    - Net Premium Received: ${net_premium:.2f}
                    
                    **Maximum Risk:** Limited to width of either spread minus net premium (${max_risk:.2f})
                    
                    **Maximum Reward:** Limited to net premium received (${max_profit:.2f})
                    
                    **Breakeven Points:** 
                    - Lower: Short Put Strike - Net Premium = ${K_put_short - net_premium:.2f}
                    - Upper: Short Call Strike + Net Premium = ${K_call_short + net_premium:.2f}
                    """)
                    
                    # Generate price range for visualization
                    prices = np.linspace(max(1, K_put_long * 0.8), K_call_long * 1.2, 100)
                    
                    # Calculate profits
                    profits = []
                    for price in prices:
                        # Long put profit
                        put_long_profit = max(0, K_put_long - price) - put_long_premium
                        # Short put profit
                        put_short_profit = put_short_premium - max(0, K_put_short - price)
                        # Short call profit
                        call_short_profit = call_short_premium - max(0, price - K_call_short)
                        # Long call profit
                        call_long_profit = max(0, price - K_call_long) - call_long_premium
                        # Total profit
                        total_profit = put_long_profit + put_short_profit + call_short_profit + call_long_profit
                        profits.append(total_profit)
                    
                    # Create DataFrame for displaying data
                    df = pd.DataFrame({
                        'Underlying Price': prices,
                        'Profit': profits
                    })
                
                # Display chart for all strategies
                fig = go.Figure()
                
                fig.add_trace(go.Scatter(
                    x=df['Underlying Price'],
                    y=df['Profit'],
                    mode='lines',
                    name='Profit',
                    line=dict(color='green', width=2)
                ))
                
                # Add zero line
                fig.add_shape(
                    type="line",
                    x0=min(prices),
                    y0=0,
                    x1=max(prices),
                    y1=0,
                    line=dict(color="black", width=1, dash="dash")
                )
                
                # Add current price marker
                fig.add_trace(go.Scatter(
                    x=[S],
                    y=[0],
                    mode='markers',
                    name='Current Price',
                    marker=dict(color='blue', size=10)
                ))
                
                fig.update_layout(
                    title=f"{selected_strategy} - Profit/Loss Diagram",
                    xaxis_title="Underlying Price at Expiration",
                    yaxis_title="Profit/Loss",
                    height=500,
                    hovermode="x unified"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Strategy advantages and disadvantages
                st.markdown("### Strategy Advantages and Disadvantages")
                
                advantages = {
                    "Long Call": [
                        "Unlimited profit potential as price rises",
                        "Limited risk (premium paid)",
                        "Leverage (control larger position with less capital)",
                        "No downside risk beyond premium"
                    ],
                    "Long Put": [
                        "Profits from downward price movement",
                        "Limited risk (premium paid)",
                        "Can be used as portfolio insurance",
                        "Leverage (control larger position with less capital)"
                    ],
                    "Short Call": [
                        "Profits from falling, flat, or slightly rising prices",
                        "Premium received upfront",
                        "Can be used to generate income on existing positions",
                        "Time decay works in your favor"
                    ],
                    "Short Put": [
                        "Profits from rising, flat, or slightly falling prices",
                        "Premium received upfront",
                        "Can be used to acquire stock at lower prices",
                        "Time decay works in your favor"
                    ],
                    "Covered Call": [
                        "Generate income from existing stock positions",
                        "Provides some downside protection (premium reduces cost basis)",
                        "Can increase overall portfolio yield",
                        "Benefits from time decay"
                    ],
                    "Protective Put": [
                        "Limits downside risk on existing stock positions",
                        "Allows participation in upside movement",
                        "Acts as portfolio insurance",
                        "Known maximum loss"
                    ],
                    "Bull Call Spread": [
                        "Lower cost than buying a call outright",
                        "Defined risk and reward",
                        "Lower breakeven point than a long call",
                        "Profitable in moderately bullish markets"
                    ],
                    "Bear Put Spread": [
                        "Lower cost than buying a put outright",
                        "Defined risk and reward",
                        "Profitable in moderately bearish markets",
                        "Short put helps offset cost of long put"
                    ],
                    "Long Straddle": [
                        "Profits from large moves in either direction",
                        "Limited risk (total premium paid)",
                        "Unlimited profit potential",
                        "Good for uncertain market conditions or ahead of major events"
                    ],
                    "Iron Condor": [
                        "Profits in range-bound markets",
                        "Premium received upfront",
                        "Defined risk and reward",
                        "Benefits from time decay"
                    ]
                }
                
                disadvantages = {
                    "Long Call": [
                        "Loses value as time passes (time decay)",
                        "Requires significant price movement to be profitable",
                        "Volatility decrease hurts position value",
                        "Can expire worthless (100% loss of premium)"
                    ],
                    "Long Put": [
                        "Loses value as time passes (time decay)",
                        "Requires significant price movement to be profitable",
                        "Volatility decrease hurts position value",
                        "Can expire worthless (100% loss of premium)"
                    ],
                    "Short Call": [
                        "Unlimited risk if price rises sharply",
                        "Requires margin (collateral)",
                        "Early assignment risk (for American options)",
                        "Volatility increase hurts position"
                    ],
                    "Short Put": [
                        "Substantial risk if price falls sharply",
                        "Potential obligation to buy shares at strike price",
                        "Requires margin (collateral)",
                        "Volatility increase hurts position"
                    ],
                    "Covered Call": [
                        "Caps upside potential",
                        "Limited downside protection",
                        "Opportunity cost if stock rises significantly",
                        "Stock can still decline substantially"
                    ],
                    "Protective Put": [
                        "Cost of protection reduces overall returns",
                        "Can be expensive during high volatility",
                        "Loses value due to time decay",
                        "Requires continuous renewal (ongoing cost)"
                    ],
                    "Bull Call Spread": [
                        "Limited profit potential",
                        "Requires moderate price increase to be profitable",
                        "Time decay works against position",
                        "Both options can expire worthless"
                    ],
                    "Bear Put Spread": [
                        "Limited profit potential",
                        "Requires moderate price decrease to be profitable",
                        "Time decay works against position",
                        "Both options can expire worthless"
                    ],
                    "Long Straddle": [
                        "Expensive strategy (two premiums)",
                        "Requires significant price movement in either direction",
                        "Suffers from time decay",
                        "Volatility decrease hurts position value"
                    ],
                    "Iron Condor": [
                        "Limited profit potential",
                        "Risk of significant loss if price moves beyond either short strike",
                        "Multiple legs increase transaction costs",
                        "Complex to manage"
                    ]
                }
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("#### Advantages")
                    for adv in advantages.get(selected_strategy, ["No specific advantages listed"]):
                        st.markdown(f"- {adv}")
                
                with col2:
                    st.markdown("#### Disadvantages")
                    for dis in disadvantages.get(selected_strategy, ["No specific disadvantages listed"]):
                        st.markdown(f"- {dis}")
                
                # When to use this strategy
                st.markdown("### When to Use This Strategy")
                
                when_to_use = {
                    "Long Call": """
                    - When you're strongly bullish on the underlying asset
                    - When you expect a significant price increase
                    - When you want to limit risk while maintaining upside exposure
                    - When you want leverage without borrowing money
                    - Before anticipated positive events (earnings, product launches, etc.)
                    """,
                    "Long Put": """
                    - When you're strongly bearish on the underlying asset
                    - When you expect a significant price decrease
                    - When you want to limit risk while gaining from downside movement
                    - When you want to hedge existing long positions without selling them
                    - Before anticipated negative events (earnings, sector weakness, etc.)
                    """,
                    "Short Call": """
                    - When you're neutral to slightly bearish on the underlying
                    - When you want to generate income from option premium
                    - When you believe volatility is overpriced
                    - When you're willing to sell shares (or get short) at the strike price
                    - When you expect time decay to work in your favor
                    """,
                    "Short Put": """
                    - When you're neutral to slightly bullish on the underlying
                    - When you want to generate income from option premium
                    - When you believe volatility is overpriced
                    - When you're willing to buy shares at the strike price
                    - When you expect time decay to work in your favor
                    """,
                    "Covered Call": """
                    - When you already own the underlying stock
                    - When you're neutral to slightly bullish on the stock
                    - When you want to generate additional income from your holdings
                    - When you're willing to sell shares at the strike price
                    - In low volatility environments where you want to enhance returns
                    """,
                    "Protective Put": """
                    - When you own the underlying stock and want downside protection
                    - During periods of uncertainty or anticipated volatility
                    - When you want to protect gains in appreciated positions
                    - When you want to retain upside potential while limiting downside risk
                    - As insurance against unforeseen negative events
                    """,
                    "Bull Call Spread": """
                    - When you're moderately bullish on the underlying
                    - When you want to reduce the cost of buying calls
                    - When you're willing to cap your upside potential to reduce cost
                    - When implied volatility is high (making outright calls expensive)
                    - When you want defined risk and defined reward
                    """,
                    "Bear Put Spread": """
                    - When you're moderately bearish on the underlying
                    - When you want to reduce the cost of buying puts
                    - When you're willing to cap your profit potential to reduce cost
                    - When implied volatility is high (making outright puts expensive)
                    - When you want defined risk and defined reward
                    """,
                    "Long Straddle": """
                    - When you expect a significant price move but are uncertain about direction
                    - Before major news events, earnings announcements, or product launches
                    - When implied volatility is low (making the strategy more affordable)
                    - When you anticipate an increase in volatility
                    - When you want to profit from a breakout from a trading range
                    """,
                    "Iron Condor": """
                    - When you expect the underlying to remain within a specific price range
                    - When implied volatility is high (making the sold options more valuable)
                    - When you want to profit from time decay
                    - In low volatility environments where prices tend to move sideways
                    - When you want defined risk and defined reward
                    """
                }
                
                st.markdown(when_to_use.get(selected_strategy, "No specific guidance available for this strategy."))
                
                # Common mistakes section
                st.markdown("### Common Mistakes to Avoid")
                
                common_mistakes = {
                    "Long Call": """
                    - Buying options with too little time to expiration (severe time decay)
                    - Overpaying for options during high volatility periods
                    - Choosing strikes that are too far out-of-the-money
                    - Allocating too much capital to speculative options
                    - Not considering the impact of volatility changes
                    """,
                    "Long Put": """
                    - Buying puts after a market has already declined significantly
                    - Overpaying for options during high volatility periods
                    - Choosing strikes that are too far out-of-the-money
                    - Using puts inefficiently for hedging (wrong strike or expiration)
                    - Not accounting for dividends when applicable
                    """,
                    "Short Call": """
                    - Not understanding the unlimited risk potential
                    - Selling calls on high-volatility stocks without proper risk management
                    - Not having a plan for when the underlying rises sharply
                    - Ignoring early assignment risk near ex-dividend dates
                    - Trading illiquid options with wide bid-ask spreads
                    """,
                    "Short Put": """
                    - Underestimating potential losses if the underlying declines sharply
                    - Not having sufficient capital to buy shares if assigned
                    - Selling puts on securities you don't want to own
                    - Chasing premium by selling puts on high-volatility stocks
                    - Not having an exit strategy for adverse price movements
                    """,
                    "Covered Call": """
                    - Selling calls at strikes below your cost basis (risking losses if called)
                    - Focusing only on premium and ignoring underlying stock quality
                    - Selling calls with too little premium to compensate for capped upside
                    - Not considering ex-dividend dates when selecting expirations
                    - Failing to adjust strategy during sharp market declines
                    """,
                    "Protective Put": """
                    - Overpaying for protection (especially during high volatility)
                    - Using inappropriate strike prices (too far OTM provides little protection)
                    - Not properly timing protection (buying after market has already fallen)
                    - Not considering cost-efficient alternatives (e.g., collars, spreads)
                    - Keeping protection in place too long without reassessing
                    """,
                    "Bull Call Spread": """
                    - Setting strikes too far apart (increasing cost)
                    - Setting strikes too close together (limiting profit potential)
                    - Opening the position too close to expiration
                    - Not considering the breakeven point relative to current price
                    - Ignoring liquidity when selecting strikes
                    """,
                    "Bear Put Spread": """
                    - Setting strikes too far apart (increasing cost)
                    - Setting strikes too close together (limiting profit potential)
                    - Entering after a substantial price decline has already occurred
                    - Not considering the breakeven point relative to current price
                    - Ignoring liquidity when selecting strikes
                    """,
                    "Long Straddle": """
                    - Implementing before low-volatility events
                    - Buying straddles when implied volatility is already high
                    - Not giving enough time for the expected move to occur
                    - Underestimating the impact of time decay
                    - Not having an exit strategy for both directional outcomes
                    """,
                    "Iron Condor": """
                    - Setting wings too narrow (increasing risk)
                    - Setting wings too wide (reducing premium)
                    - Not accounting for upcoming events that may cause volatility
                    - Ignoring liquidity in the options chosen
                    - Not having adjustment strategies for when price approaches short strikes
                    """
                }
                
                st.markdown(common_mistakes.get(selected_strategy, "No specific mistakes listed for this strategy."))

            # Educational Resources Tab
            with tabs[3]:
                    
                st.title("Educational Resources")
                
                st.markdown("""
                ### Option Basics Quiz
                
                Test your understanding of options with this quick quiz:
                """)
                
                q1 = st.radio(
                    "1. Which option gives the holder the right to buy the underlying asset?",
                    ["Call Option", "Put Option", "Both", "Neither"],
                    index=None
                )
                
                if q1:
                    if q1 == "Call Option":
                        st.success("Correct! A call option gives the holder the right to buy the underlying asset at the strike price.")
                    else:
                        st.error("Incorrect. A call option gives the holder the right to buy the underlying asset at the strike price.")
                
                q2 = st.radio(
                    "2. What's the maximum loss for a buyer of a call option?",
                    ["Unlimited", "Strike Price", "Premium Paid", "Strike Price + Premium"],
                    index=None
                )
                
                if q2:
                    if q2 == "Premium Paid":
                        st.success("Correct! The maximum loss for a call option buyer is limited to the premium paid.")
                    else:
                        st.error("Incorrect. The maximum loss for a call option buyer is limited to the premium paid.")
                
                q3 = st.radio(
                    "3. What does it mean to have a 'long' position in options?",
                    ["You're expecting the price to go up", "You've bought the option", "You're holding the option for a long time", "You've sold the option"],
                    index=None
                )
                
                if q3:
                    if q3 == "You've bought the option":
                        st.success("Correct! Having a 'long' position means you've bought the option.")
                    else:
                        st.error("Incorrect. Having a 'long' position means you've bought the option.")
                
                q4 = st.radio(
                    "4. Which option style can only be exercised at expiration?",
                    ["American Option", "European Option", "Asian Option", "Bermuda Option"],
                    index=None
                )
                
                if q4:
                    if q4 == "European Option":
                        st.success("Correct! European options can only be exercised at expiration.")
                    else:
                        st.error("Incorrect. European options can only be exercised at expiration.")
                
                q5 = st.radio(
                    "5. What Greek measures an option's sensitivity to time decay?",
                    ["Delta", "Gamma", "Theta", "Vega"],
                    index=None
                )
                
                if q5:
                    if q5 == "Theta":
                        st.success("Correct! Theta measures the rate at which an option loses value as time passes.")
                    else:
                        st.error("Incorrect. Theta measures the rate at which an option loses value as time passes.")
                
                # Additional resources
                st.markdown("""
                ### Additional Resources
                
                #### Option Strategies for Different Market Conditions
                
                | Strategy | Market Outlook | Risk | Potential Reward |
                | --- | --- | --- | --- |
                | Long Call | Bullish | Limited (Premium) | Unlimited |
                | Long Put | Bearish | Limited (Premium) | Limited but substantial |
                | Short Call | Neutral to Bearish | Unlimited | Limited (Premium) |
                | Short Put | Neutral to Bullish | Limited but substantial | Limited (Premium) |
                | Covered Call | Slightly Bullish | Substantial | Limited |
                | Protective Put | Bullish with downside protection | Limited | Unlimited minus premium |
                | Bull Call Spread | Moderately Bullish | Limited (Net Premium) | Limited (Spread - Premium) |
                | Bear Put Spread | Moderately Bearish | Limited (Net Premium) | Limited (Spread - Premium) |
                | Long Straddle | Volatile (Either Direction) | Limited (Total Premium) | Unlimited upside, Limited downside |
                | Iron Condor | Neutral (Range-Bound) | Limited (Width of spread - Premium) | Limited (Premium) |
                
                #### Comparing Basic Option Strategies
                
                **Directional Strategies:**
                - **Bullish:** Long Call > Bull Call Spread > Bull Put Spread > Short Put
                - **Bearish:** Long Put > Bear Put Spread > Bear Call Spread > Short Call
                
                **Volatility Strategies:**
                - **Expect High Volatility:** Long Straddle > Long Strangle > Long Guts
                - **Expect Low Volatility:** Iron Condor > Short Straddle > Short Strangle > Butterfly
                
                **Risk Management Strategies:**
                - **Protect Long Stock:** Protective Put > Collar > Married Put
                - **Enhance Returns:** Covered Call > Cash-Secured Put > Covered Strangle
                
                #### Black-Scholes Formula Explanation
                
                The Black-Scholes formula is used to calculate the theoretical price of European-style options. The key inputs are:
                
                - **S**: Current stock price
                - **K**: Strike price
                - **T**: Time to expiration (in years)
                - **r**: Risk-free interest rate (annual)
                - **œÉ**: Volatility of the underlying asset
                
                The formula calculates:
                
                For a call option: C = S‚ãÖN(d‚ÇÅ) - K‚ãÖe^(-rT)‚ãÖN(d‚ÇÇ)
                For a put option: P = K‚ãÖe^(-rT)‚ãÖN(-d‚ÇÇ) - S‚ãÖN(-d‚ÇÅ)
                
                Where d‚ÇÅ and d‚ÇÇ are calculated based on the inputs, and N() is the cumulative distribution function of the standard normal distribution.
                """)

# Footer
st.divider()
st.caption("¬© 2025 Derivatives Teaching Tool | Prof. Jos√© Am√©rico ‚Äì Coppead")
st.caption("Note: This tool is for educational purposes only. Real-world trading involves additional complexities.")
